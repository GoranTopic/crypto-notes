{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Pressable from\"react-native-web/dist/exports/Pressable\";import Text from\"react-native-web/dist/exports/Text\";import React,{useState}from'react';import Button from\"./Button.js\";import{DotsLoader}from'react-native-indicator';import colors from\"../../config/colors.js\";export default function LoadingButton(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _props$title=props.title,title=_props$title===void 0?\"button\":_props$title,onPress=props.onPress,_props$Loader=props.Loader,Loader=_props$Loader===void 0?DotsLoader:_props$Loader,_props$styleButton=props.styleButton,styleButton=_props$styleButton===void 0?{}:_props$styleButton,_props$styleText=props.styleText,styleText=_props$styleText===void 0?{}:_props$styleText,_props$styleLoader=props.styleLoader,styleLoader=_props$styleLoader===void 0?{}:_props$styleLoader;var handlePress=function handlePress(){return _regeneratorRuntime.async(function handlePress$(_context){while(1){switch(_context.prev=_context.next){case 0:setLoading(true);_context.next=3;return _regeneratorRuntime.awrap(onPress().then(setLoading(false)));case 3:case\"end\":return _context.stop();}}},null,null,null,Promise);};return React.createElement(View,{style:styles.container},loading?React.createElement(Loader,_extends({color:colors.btnGreen,size:16,betweenSpace:7},props)):React.createElement(Button,_extends({styleText:styleText,styleButton:styleButton,title:title,onPress:handlePress},props)));}var styles=StyleSheet.create({container:{backgroundColor:'#fff',alignItems:'center',justifyContent:'center'}});","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/src/components/buttons/LoadingButton.js"],"names":["React","useState","Button","DotsLoader","colors","LoadingButton","props","loading","setLoading","title","onPress","Loader","styleButton","styleText","styleLoader","handlePress","then","styles","container","btnGreen","StyleSheet","create","backgroundColor","alignItems","justifyContent"],"mappings":"4ZAEA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,MAAP,mBACA,OAASC,UAAT,KAA2B,wBAA3B,CACA,MAAOC,CAAAA,MAAP,8BAEA,cAAe,SAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA6B,CAC1C,cAA8BL,QAAQ,CAAC,KAAD,CAAtC,wCAAOM,OAAP,eAAgBC,UAAhB,eACA,iBAOIF,KAPJ,CACEG,KADF,CACEA,KADF,uBACU,QADV,cAEEC,OAFF,CAOIJ,KAPJ,CAEEI,OAFF,eAOIJ,KAPJ,CAGEK,MAHF,CAGEA,MAHF,wBAGWR,UAHX,kCAOIG,KAPJ,CAIEM,WAJF,CAIEA,WAJF,6BAIgB,EAJhB,qCAOIN,KAPJ,CAKEO,SALF,CAKEA,SALF,2BAKc,EALd,qCAOIP,KAPJ,CAMEQ,WANF,CAMEA,WANF,6BAMgB,EANhB,oBASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,wHAClBP,UAAU,CAAC,IAAD,CAAV,CADkB,iDAEZE,OAAO,GACVM,IADG,CACER,UAAU,CAAC,KAAD,CADZ,CAFY,uEAApB,CAMA,MACE,qBAAC,IAAD,EAAM,KAAK,CAAES,MAAM,CAACC,SAApB,EACIX,OAAO,CACP,oBAAC,MAAD,WAAQ,KAAK,CAAEH,MAAM,CAACe,QAAtB,CACE,IAAI,CAAE,EADR,CAEE,YAAY,CAAE,CAFhB,EAGMb,KAHN,EADO,CAKP,oBAAC,MAAD,WACE,SAAS,CAAEO,SADb,CAEE,WAAW,CAAED,WAFf,CAGE,KAAK,CAAEH,KAHT,CAIE,OAAO,CAAEM,WAJX,EAKMT,KALN,EANJ,CADF,CAiBD,CAED,GAAMW,CAAAA,MAAM,CAAGG,UAAU,CAACC,MAAX,CAAkB,CAC/BH,SAAS,CAAE,CACTI,eAAe,CAAE,MADR,CAETC,UAAU,CAAE,QAFH,CAGTC,cAAc,CAAE,QAHP,CADoB,CAAlB,CAAf","sourcesContent":["/* a button that when pressed diplayes a loding animation */\nimport { StyleSheet, View, Pressable, Text } from 'react-native';\nimport React, { useState } from 'react';\nimport Button from './Button.js';\nimport { DotsLoader } from 'react-native-indicator';\nimport colors from '../../config/colors.js';\n\nexport default function LoadingButton(props){\n\t\tconst [loading, setLoading] = useState(false);\n\t\tconst { \n\t\t\t\ttitle = \"button\",\n\t\t\t\tonPress,\n\t\t\t\tLoader = DotsLoader,\n\t\t\t\tstyleButton = {},\n\t\t\t\tstyleText = {},\n\t\t\t\tstyleLoader = {},\n\t\t} = props;\n\t\t\n\t\tconst handlePress = async () => {\n\t\t\t\tsetLoading(true);\n\t\t\t\tawait onPress()\n\t\t\t\t\t\t.then(setLoading(false));\n\t\t}\n\t\t\n\t\treturn(\n\t\t\t\t<View style={styles.container}>  \n\t\t\t\t\t\t{ loading?\n\t\t\t\t\t\t\t\t<Loader color={colors.btnGreen}\n\t\t\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\t\t\tbetweenSpace={7}\n\t\t\t\t\t\t\t\t\t\t{...props} /> :\n\t\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\t\t\tstyleText={styleText}\n\t\t\t\t\t\t\t\t\t\tstyleButton={styleButton} \n\t\t\t\t\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\t\t\t\t\tonPress={handlePress} \n\t\t\t\t\t\t\t\t\t\t{...props} /> \n\t\t\t\t\t\t} \n\t\t\t\t</View> \n\t\t);\n\n}\n\nconst styles = StyleSheet.create({\n\t\tcontainer: {\n\t\t\t\tbackgroundColor: '#fff',\n\t\t\t\talignItems: 'center',\n\t\t\t\tjustifyContent: 'center',\n\t\t},\n});\n\t\n"]},"metadata":{},"sourceType":"module"}