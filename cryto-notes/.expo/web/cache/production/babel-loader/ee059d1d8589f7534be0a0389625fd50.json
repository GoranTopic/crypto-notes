{"ast":null,"code":"import React from'react';import PanResponder from\"react-native-web/dist/exports/PanResponder\";export function shouldSetPanResponder(_event,gesture){var dx=gesture.dx,dy=gesture.dy;var offset=2;return Math.abs(dx)>offset||Math.abs(dy)>offset;}export function shouldDismissView(newAnimatedValue,gesture){var dismissThreshold=0.65;var vy=gesture.vy,dy=gesture.dy;return newAnimatedValue<=dismissThreshold||Math.abs(vy)>=dismissThreshold&&dy<0;}export function usePanResponder(_ref){var animatedValue=_ref.animatedValue,computeNewAnimatedValueForGesture=_ref.computeNewAnimatedValueForGesture,onDismiss=_ref.onDismiss,onRestore=_ref.onRestore;var onMove=React.useCallback(function(_event,gesture){var _animatedValue$curren;var newAnimatedValue=computeNewAnimatedValueForGesture(gesture);(_animatedValue$curren=animatedValue.current)==null?void 0:_animatedValue$curren.setValue(newAnimatedValue);},[animatedValue,computeNewAnimatedValueForGesture]);var onRelease=React.useCallback(function(_event,gesture){var newAnimatedValue=computeNewAnimatedValueForGesture(gesture);if(shouldDismissView(newAnimatedValue,gesture)){onDismiss();}else{onRestore();}},[computeNewAnimatedValueForGesture,onDismiss,onRestore]);var panResponder=React.useMemo(function(){return PanResponder.create({onMoveShouldSetPanResponder:shouldSetPanResponder,onMoveShouldSetPanResponderCapture:shouldSetPanResponder,onPanResponderMove:onMove,onPanResponderRelease:onRelease});},[onMove,onRelease]);return{panResponder:panResponder,onMove:onMove,onRelease:onRelease};}","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/node_modules/react-native-toast-message/lib/src/hooks/usePanResponder.js"],"names":["React","shouldSetPanResponder","_event","gesture","dx","dy","offset","Math","abs","shouldDismissView","newAnimatedValue","dismissThreshold","vy","usePanResponder","animatedValue","computeNewAnimatedValueForGesture","onDismiss","onRestore","onMove","useCallback","current","setValue","onRelease","panResponder","useMemo","PanResponder","create","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","onPanResponderRelease"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,qEAEA,MAAO,SAASC,CAAAA,qBAAT,CAA+BC,MAA/B,CAAuCC,OAAvC,CAAgD,CACnD,GAAQC,CAAAA,EAAR,CAAmBD,OAAnB,CAAQC,EAAR,CAAYC,EAAZ,CAAmBF,OAAnB,CAAYE,EAAZ,CAGA,GAAMC,CAAAA,MAAM,CAAG,CAAf,CACA,MAAOC,CAAAA,IAAI,CAACC,GAAL,CAASJ,EAAT,EAAeE,MAAf,EAAyBC,IAAI,CAACC,GAAL,CAASH,EAAT,EAAeC,MAA/C,CACH,CACD,MAAO,SAASG,CAAAA,iBAAT,CAA2BC,gBAA3B,CAA6CP,OAA7C,CAAsD,CACzD,GAAMQ,CAAAA,gBAAgB,CAAG,IAAzB,CACA,GAAQC,CAAAA,EAAR,CAAmBT,OAAnB,CAAQS,EAAR,CAAYP,EAAZ,CAAmBF,OAAnB,CAAYE,EAAZ,CACA,MAAQK,CAAAA,gBAAgB,EAAIC,gBAApB,EACHJ,IAAI,CAACC,GAAL,CAASI,EAAT,GAAgBD,gBAAhB,EAAoCN,EAAE,CAAG,CAD9C,CAEH,CACD,MAAO,SAASQ,CAAAA,eAAT,MAAqG,IAA1EC,CAAAA,aAA0E,MAA1EA,aAA0E,CAA3DC,iCAA2D,MAA3DA,iCAA2D,CAAxBC,SAAwB,MAAxBA,SAAwB,CAAbC,SAAa,MAAbA,SAAa,CACxG,GAAMC,CAAAA,MAAM,CAAGlB,KAAK,CAACmB,WAAN,CAAkB,SAACjB,MAAD,CAASC,OAAT,CAAqB,2BAClD,GAAMO,CAAAA,gBAAgB,CAAGK,iCAAiC,CAACZ,OAAD,CAA1D,CACA,uBAAAW,aAAa,CAACM,OAAd,qCAAuBC,QAAvB,CAAgCX,gBAAhC,EACH,CAHc,CAGZ,CAACI,aAAD,CAAgBC,iCAAhB,CAHY,CAAf,CAIA,GAAMO,CAAAA,SAAS,CAAGtB,KAAK,CAACmB,WAAN,CAAkB,SAACjB,MAAD,CAASC,OAAT,CAAqB,CACrD,GAAMO,CAAAA,gBAAgB,CAAGK,iCAAiC,CAACZ,OAAD,CAA1D,CACA,GAAIM,iBAAiB,CAACC,gBAAD,CAAmBP,OAAnB,CAArB,CAAkD,CAC9Ca,SAAS,GACZ,CAFD,IAGK,CACDC,SAAS,GACZ,CACJ,CARiB,CAQf,CAACF,iCAAD,CAAoCC,SAApC,CAA+CC,SAA/C,CARe,CAAlB,CASA,GAAMM,CAAAA,YAAY,CAAGvB,KAAK,CAACwB,OAAN,CAAc,iBAAMC,CAAAA,YAAY,CAACC,MAAb,CAAoB,CACzDC,2BAA2B,CAAE1B,qBAD4B,CAEzD2B,kCAAkC,CAAE3B,qBAFqB,CAGzD4B,kBAAkB,CAAEX,MAHqC,CAIzDY,qBAAqB,CAAER,SAJkC,CAApB,CAAN,EAAd,CAKjB,CAACJ,MAAD,CAASI,SAAT,CALiB,CAArB,CAMA,MAAO,CACHC,YAAY,CAAZA,YADG,CAEHL,MAAM,CAANA,MAFG,CAGHI,SAAS,CAATA,SAHG,CAAP,CAKH","sourcesContent":["import React from 'react';\nimport { PanResponder } from 'react-native';\nexport function shouldSetPanResponder(_event, gesture) {\n    const { dx, dy } = gesture;\n    // Fixes onPress handler\n    // https://github.com/calintamas/react-native-toast-message/issues/113\n    const offset = 2;\n    return Math.abs(dx) > offset || Math.abs(dy) > offset;\n}\nexport function shouldDismissView(newAnimatedValue, gesture) {\n    const dismissThreshold = 0.65;\n    const { vy, dy } = gesture;\n    return (newAnimatedValue <= dismissThreshold ||\n        (Math.abs(vy) >= dismissThreshold && dy < 0));\n}\nexport function usePanResponder({ animatedValue, computeNewAnimatedValueForGesture, onDismiss, onRestore }) {\n    const onMove = React.useCallback((_event, gesture) => {\n        const newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n        animatedValue.current?.setValue(newAnimatedValue);\n    }, [animatedValue, computeNewAnimatedValueForGesture]);\n    const onRelease = React.useCallback((_event, gesture) => {\n        const newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n        if (shouldDismissView(newAnimatedValue, gesture)) {\n            onDismiss();\n        }\n        else {\n            onRestore();\n        }\n    }, [computeNewAnimatedValueForGesture, onDismiss, onRestore]);\n    const panResponder = React.useMemo(() => PanResponder.create({\n        onMoveShouldSetPanResponder: shouldSetPanResponder,\n        onMoveShouldSetPanResponderCapture: shouldSetPanResponder,\n        onPanResponderMove: onMove,\n        onPanResponderRelease: onRelease\n    }), [onMove, onRelease]);\n    return {\n        panResponder,\n        onMove,\n        onRelease\n    };\n}\n"]},"metadata":{},"sourceType":"module"}