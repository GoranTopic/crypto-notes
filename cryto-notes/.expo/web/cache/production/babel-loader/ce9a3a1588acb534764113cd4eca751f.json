{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useEffect,useState}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import TextInput from\"./TextInput.js\";import validator from'validator';export default function ValidatingTextInput(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),errorText=_useState2[0],setErrorText=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),validators=_useState4[0],setValidators=_useState4[1];var value=props.value,onChangeText=props.onChangeText,_props$placeholder=props.placeholder,placeholder=_props$placeholder===void 0?'input':_props$placeholder,_props$error=props.error,error=_props$error===void 0?'invalid':_props$error,_props$showError=props.showError,showError=_props$showError===void 0?false:_props$showError,_props$validate=props.validate,validate=_props$validate===void 0?true:_props$validate,_props$styleTextInput=props.styleTextInput,styleTextInput=_props$styleTextInput===void 0?{}:_props$styleTextInput,_props$styleContainer=props.styleContainer,styleContainer=_props$styleContainer===void 0?{}:_props$styleContainer,_props$styleErrorText=props.styleErrorText,styleErrorText=_props$styleErrorText===void 0?{}:_props$styleErrorText;var getValidators=function getValidators(){return Object.keys(props).filter(function(prop){return validator[prop];}).map(function(prop){return{validate:validator[prop],params:typeof props[prop]===\"boolean\"?{}:props[prop]};});};useEffect(function(){if(showError)setErrorText(error);else setErrorText('');},[error,showError]);useEffect(function(){setValidators(getValidators());if(showError)setErrorText(error);},[]);var onChange=function onChange(text){onChangeText(text);console.log(text);if(validate)validators.forEach(function(validator){if(!validator.validate(text,validator.params))setErrorText(error);else setErrorText('');});};var containerStyles=[styles.container,styleContainer];var textInputStyles=[styles.textInput,styleTextInput];var errorTextStyles=[styles.errorText,styleErrorText];return React.createElement(View,{style:containerStyles},React.createElement(TextInput,_extends({style:textInputStyles},props,{onChangeText:onChange})),errorText!==''?React.createElement(Text,{style:errorTextStyles},\"* \",errorText):React.createElement(React.Fragment,null));}var styles=StyleSheet.create({container:{flexDirection:'column',justifyContent:'center'},textInput:{},errorText:{color:'red',fontStyle:'italic',fontSize:12,fontWeight:'900',textAlign:'left'}});","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/src/components/text-inputs/ValidatingTextInput.js"],"names":["React","useEffect","useState","TextInput","validator","ValidatingTextInput","props","errorText","setErrorText","validators","setValidators","value","onChangeText","placeholder","error","showError","validate","styleTextInput","styleContainer","styleErrorText","getValidators","Object","keys","filter","prop","map","params","onChange","text","console","log","forEach","containerStyles","styles","container","textInputStyles","textInput","errorTextStyles","StyleSheet","create","flexDirection","justifyContent","color","fontStyle","fontSize","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState  } from 'react';\nimport { StyleSheet, Text,  View, } from 'react-native';\nimport TextInput from './TextInput.js';\nimport validator from 'validator';\n\nexport default function ValidatingTextInput(props){\n    /* this component needs cleaning, but it get the job done */\n    const [errorText, setErrorText] = useState('');\n    const [validators, setValidators] = useState([]);\n\n    const { value, // default value from props\n        onChangeText,\n        placeholder = 'input',\n        error= 'invalid',\n        showError=false,\n        validate = true,\n        styleTextInput = {},\n        styleContainer = {},\n        styleErrorText = {},\n    } = props;\n    // intesect\n\n    const getValidators = () =>\n        Object.keys(props)\n            .filter( prop => validator[prop])\n            .map( prop => ({\n                validate: validator[prop],\n                params: typeof props[prop] === \"boolean\" ?\n                {} : props[prop],\n            }));\n\n    useEffect(() => {\n        if(showError)\n            setErrorText(error);\n        else setErrorText('');\n    }, [error, showError]);\n\n    useEffect(() => { // get validatos from props\n        setValidators( getValidators());\n        if(showError) setErrorText(error);\n    }, []);\n\n    const onChange = text => {\n        onChangeText(text);\n        console.log(text);\n        if(validate)\n            validators.forEach( validator => {\n                //console.log(validator);\n                if(!validator.validate(text, validator.params)) \n                    setErrorText(error);\n                else setErrorText('');\n                //console.log(error);\n            });\n    };\n\n    const containerStyles = [ styles.container,  styleContainer ];\n    const textInputStyles = [ styles.textInput,  styleTextInput ];\n    const errorTextStyles = [ styles.errorText,  styleErrorText ];\n\n    return(\n        <View style={containerStyles}>\n            <TextInput\n                style={textInputStyles}\n                {...props}\n                onChangeText={onChange}\n            />\n            { errorText !== '' ?\n                <Text style={errorTextStyles}>\n                    * {errorText}\n                </Text> :\n                    <></>\n            }\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection:'column',\n        justifyContent: 'center',\n    },\n    textInput: {\n    },\n    errorText:{\n        color: 'red',\n        fontStyle: 'italic',\n        fontSize: 12,\n        fontWeight: '900',\n        textAlign: 'left',\n    },\n});\n\n"]},"metadata":{},"sourceType":"module"}