{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import React from'react';import PropTypes from'prop-types';import Animated from\"react-native-web/dist/exports/Animated\";import{Surface}from'@react-native-community/art';import AnimatedCircle from\"../animated/AnimatedCircle\";import{color}from\"../const\";var PulseLoader=function(_React$PureComponent){_inherits(PulseLoader,_React$PureComponent);var _super=_createSuper(PulseLoader);function PulseLoader(){var _this;_classCallCheck(this,PulseLoader);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={effect:new Animated.ValueXY({x:0,y:1})};_this._animation=function(){Animated.parallel([Animated.timing(_this.state.effect.x,{toValue:1,duration:_this.props.frequency,useNativeDriver:false}),Animated.timing(_this.state.effect.y,{toValue:0.05,duration:_this.props.frequency,useNativeDriver:false})]).start(function(){if(!_this.unmounted){_this.state.effect.setValue({x:0,y:1});_this._animation();}});};return _this;}_createClass(PulseLoader,[{key:\"componentDidMount\",value:function componentDidMount(){this._animation();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.unmounted=true;}},{key:\"render\",value:function render(){var _this$props=this.props,color=_this$props.color,size=_this$props.size;return React.createElement(Surface,{width:size,height:size},React.createElement(AnimatedCircle,{radius:size,fill:color,scale:this.state.effect.x,opacity:this.state.effect.y,x:size/2,y:size/2}));}}]);return PulseLoader;}(React.PureComponent);PulseLoader.propTypes={color:PropTypes.string,size:PropTypes.number,frequency:PropTypes.number};PulseLoader.defaultProps={color:color,size:30,frequency:1000};export{PulseLoader as default};","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/node_modules/react-native-indicator/lib/loader/PulseLoader.js"],"names":["React","PropTypes","Surface","AnimatedCircle","color","PulseLoader","state","effect","Animated","ValueXY","x","y","_animation","parallel","timing","toValue","duration","props","frequency","useNativeDriver","start","unmounted","setValue","size","PureComponent","propTypes","string","number","defaultProps"],"mappings":"qgCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,C,6DAEA,OAASC,OAAT,KAAwB,6BAAxB,CACA,MAAOC,CAAAA,cAAP,kCACA,OAASC,KAAT,gB,GAEqBC,CAAAA,W,sVAanBC,K,CAAQ,CACNC,MAAM,CAAE,GAAIC,CAAAA,QAAQ,CAACC,OAAb,CAAqB,CAAEC,CAAC,CAAE,CAAL,CAAQC,CAAC,CAAE,CAAX,CAArB,CADF,C,OAYRC,U,CAAa,UAAM,CACjBJ,QAAQ,CAACK,QAAT,CAAkB,CAChBL,QAAQ,CAACM,MAAT,CAAgB,MAAKR,KAAL,CAAWC,MAAX,CAAkBG,CAAlC,CAAqC,CACnCK,OAAO,CAAE,CAD0B,CAEnCC,QAAQ,CAAE,MAAKC,KAAL,CAAWC,SAFc,CAGnCC,eAAe,CAAE,KAHkB,CAArC,CADgB,CAMhBX,QAAQ,CAACM,MAAT,CAAgB,MAAKR,KAAL,CAAWC,MAAX,CAAkBI,CAAlC,CAAqC,CACnCI,OAAO,CAAE,IAD0B,CAEnCC,QAAQ,CAAE,MAAKC,KAAL,CAAWC,SAFc,CAGnCC,eAAe,CAAE,KAHkB,CAArC,CANgB,CAAlB,EAWGC,KAXH,CAWS,UAAM,CACb,GAAI,CAAC,MAAKC,SAAV,CAAqB,CACnB,MAAKf,KAAL,CAAWC,MAAX,CAAkBe,QAAlB,CAA2B,CAAEZ,CAAC,CAAE,CAAL,CAAQC,CAAC,CAAE,CAAX,CAA3B,EACA,MAAKC,UAAL,GACD,CACF,CAhBD,EAiBD,C,wEA1BD,4BAAoB,CAClB,KAAKA,UAAL,GACD,C,oCAED,+BAAuB,CACrB,KAAKS,SAAL,CAAiB,IAAjB,CACD,C,sBAsBD,iBAAS,CACP,gBAAwB,KAAKJ,KAA7B,CAAQb,KAAR,aAAQA,KAAR,CAAemB,IAAf,aAAeA,IAAf,CACA,MACE,qBAAC,OAAD,EAAS,KAAK,CAAEA,IAAhB,CAAsB,MAAM,CAAEA,IAA9B,EACE,oBAAC,cAAD,EACE,MAAM,CAAEA,IADV,CAEE,IAAI,CAAEnB,KAFR,CAGE,KAAK,CAAE,KAAKE,KAAL,CAAWC,MAAX,CAAkBG,CAH3B,CAIE,OAAO,CAAE,KAAKJ,KAAL,CAAWC,MAAX,CAAkBI,CAJ7B,CAKE,CAAC,CAAEY,IAAI,CAAG,CALZ,CAME,CAAC,CAAEA,IAAI,CAAG,CANZ,EADF,CADF,CAYD,C,yBA3DsCvB,KAAK,CAACwB,a,EAA1BnB,W,CACZoB,S,CAAY,CACjBrB,KAAK,CAAEH,SAAS,CAACyB,MADA,CAEjBH,IAAI,CAAEtB,SAAS,CAAC0B,MAFC,CAGjBT,SAAS,CAAEjB,SAAS,CAAC0B,MAHJ,C,CADAtB,W,CAOZuB,Y,CAAe,CACpBxB,KAAK,CAALA,KADoB,CAEpBmB,IAAI,CAAE,EAFc,CAGpBL,SAAS,CAAE,IAHS,C,QAPHb,W","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated } from 'react-native';\nimport { Surface } from '@react-native-community/art';\nimport AnimatedCircle from '../animated/AnimatedCircle';\nimport { color } from '../const';\n\nexport default class PulseLoader extends React.PureComponent {\n  static propTypes = {\n    color: PropTypes.string,\n    size: PropTypes.number,\n    frequency: PropTypes.number,\n  };\n\n  static defaultProps = {\n    color,\n    size: 30,\n    frequency: 1000,\n  };\n\n  state = {\n    effect: new Animated.ValueXY({ x: 0, y: 1 }),\n  };\n\n  componentDidMount() {\n    this._animation();\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  _animation = () => {\n    Animated.parallel([\n      Animated.timing(this.state.effect.x, {\n        toValue: 1,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.effect.y, {\n        toValue: 0.05,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n    ]).start(() => {\n      if (!this.unmounted) {\n        this.state.effect.setValue({ x: 0, y: 1 });\n        this._animation();\n      }\n    });\n  };\n\n  render() {\n    const { color, size } = this.props;\n    return (\n      <Surface width={size} height={size}>\n        <AnimatedCircle\n          radius={size}\n          fill={color}\n          scale={this.state.effect.x}\n          opacity={this.state.effect.y}\n          x={size / 2}\n          y={size / 2}\n        />\n      </Surface>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}