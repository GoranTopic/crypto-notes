{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"android_ripple\",\"pressColor\",\"pressOpacity\",\"style\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import Pressable from\"react-native-web/dist/exports/Pressable\";var ANDROID_VERSION_LOLLIPOP=21;var ANDROID_SUPPORTS_RIPPLE=Platform.OS==='android'&&Platform.Version>=ANDROID_VERSION_LOLLIPOP;export default function PlatformPressable(_ref){var android_ripple=_ref.android_ripple,_ref$pressColor=_ref.pressColor,pressColor=_ref$pressColor===void 0?'rgba(0, 0, 0, .32)':_ref$pressColor,pressOpacity=_ref.pressOpacity,_style=_ref.style,rest=_objectWithoutProperties(_ref,_excluded);return React.createElement(Pressable,_extends({android_ripple:ANDROID_SUPPORTS_RIPPLE?_objectSpread({color:pressColor},android_ripple):undefined,style:function style(_ref2){var pressed=_ref2.pressed;return[{opacity:pressed&&!ANDROID_SUPPORTS_RIPPLE?pressOpacity:1},typeof _style==='function'?_style({pressed:pressed}):_style];}},rest));}","map":{"version":3,"sources":["PlatformPressable.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","Platform","pressColor","rest","color","android_ripple","pressed","opacity","style"],"mappings":"yvCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,4HASA,GAAMA,CAAAA,wBAAwB,CAA9B,EAAA,CACA,GAAMC,CAAAA,uBAAuB,CAC3BC,QAAQ,CAARA,EAAAA,GAAAA,SAAAA,EAA6BA,QAAQ,CAARA,OAAAA,EAD/B,wBAAA,CAUA,cAAe,SAAA,CAAA,iBAAA,MAML,IANgC,CAAA,cAMhC,MANgC,cAMhC,sBAJRC,UAIQ,CAJRA,UAIQ,0BANgC,oBAMhC,iBANgC,YAMhC,MANgC,YAMhC,CANgC,MAMhC,MANgC,KAMhC,CADLC,IACK,0CACR,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CACE,cAAc,CACZH,uBAAuB,gBACjBI,KAAK,CAAP,UADmB,EACKC,cADL,EAF3B,SAAA,CAME,KAAK,CAAE,yBAAGC,CAAAA,OAAH,OAAGA,OAAH,OAAiB,CACtB,CAAEC,OAAO,CAAED,OAAO,EAAI,CAAXA,uBAAAA,CAAAA,YAAAA,CAAqD,CAAhE,CADsB,CAEtB,MAAA,CAAA,MAAA,GAAA,UAAA,CAA8BE,MAAK,CAAC,CAAEF,OAAAA,CAAAA,OAAF,CAAD,CAAnC,CAFsB,MAAA,CAAjB,EANT,CAAA,CADF,IACE,CAAA,CADF,CAcD","sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, PressableProps } from 'react-native';\n\nexport type Props = PressableProps & {\n  pressColor?: string;\n  pressOpacity?: number;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nexport default function PlatformPressable({\n  android_ripple,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  pressOpacity,\n  style,\n  ...rest\n}: Props) {\n  return (\n    <Pressable\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? { color: pressColor, ...android_ripple }\n          : undefined\n      }\n      style={({ pressed }) => [\n        { opacity: pressed && !ANDROID_SUPPORTS_RIPPLE ? pressOpacity : 1 },\n        typeof style === 'function' ? style({ pressed }) : style,\n      ]}\n      {...rest}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}