{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport React, { useState } from 'react';\nimport Button from \"./Button.js\";\nimport { DotsLoader } from 'react-native-indicator';\nimport colors from \"../../config/colors.js\";\nexport default function LoadingButton(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _props$title = props.title,\n      title = _props$title === void 0 ? \"button\" : _props$title,\n      onPress = props.onPress,\n      _props$Loader = props.Loader,\n      Loader = _props$Loader === void 0 ? DotsLoader : _props$Loader,\n      _props$styleButton = props.styleButton,\n      styleButton = _props$styleButton === void 0 ? {} : _props$styleButton,\n      _props$styleText = props.styleText,\n      styleText = _props$styleText === void 0 ? {} : _props$styleText,\n      _props$styleLoader = props.styleLoader,\n      styleLoader = _props$styleLoader === void 0 ? {} : _props$styleLoader;\n\n  var handlePress = function handlePress() {\n    return _regeneratorRuntime.async(function handlePress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(onPress().then(setLoading(false)));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, loading ? React.createElement(Loader, _extends({\n    color: colors.btnGreen,\n    size: 16,\n    betweenSpace: 7\n  }, props)) : React.createElement(Button, _extends({\n    styleText: styleText,\n    styleButton: styleButton,\n    title: title,\n    onPress: handlePress\n  }, props)));\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/home/telix/crypto-note/cryto-note/src/components/buttons/LoadingButton.js"],"names":["React","useState","Button","DotsLoader","colors","LoadingButton","props","loading","setLoading","title","onPress","Loader","styleButton","styleText","styleLoader","handlePress","then","styles","container","btnGreen","StyleSheet","create","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,MAAP;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAC1C,kBAA8BL,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AACA,qBAOIF,KAPJ,CACEG,KADF;AAAA,MACEA,KADF,6BACU,QADV;AAAA,MAEEC,OAFF,GAOIJ,KAPJ,CAEEI,OAFF;AAAA,sBAOIJ,KAPJ,CAGEK,MAHF;AAAA,MAGEA,MAHF,8BAGWR,UAHX;AAAA,2BAOIG,KAPJ,CAIEM,WAJF;AAAA,MAIEA,WAJF,mCAIgB,EAJhB;AAAA,yBAOIN,KAPJ,CAKEO,SALF;AAAA,MAKEA,SALF,iCAKc,EALd;AAAA,2BAOIP,KAPJ,CAMEQ,WANF;AAAA,MAMEA,WANF,mCAMgB,EANhB;;AASA,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAClBP,YAAAA,UAAU,CAAC,IAAD,CAAV;AADkB;AAAA,6CAEZE,OAAO,GACVM,IADG,CACER,UAAU,CAAC,KAAD,CADZ,CAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAMA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAES,MAAM,CAACC;AAApB,KACIX,OAAO,GACP,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEH,MAAM,CAACe,QAAtB;AACE,IAAA,IAAI,EAAE,EADR;AAEE,IAAA,YAAY,EAAE;AAFhB,KAGMb,KAHN,EADO,GAKP,oBAAC,MAAD;AACE,IAAA,SAAS,EAAEO,SADb;AAEE,IAAA,WAAW,EAAED,WAFf;AAGE,IAAA,KAAK,EAAEH,KAHT;AAIE,IAAA,OAAO,EAAEM;AAJX,KAKMT,KALN,EANJ,CADF;AAiBD;AAED,IAAMW,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,eAAe,EAAE,MADR;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP;AADoB,CAAlB,CAAf","sourcesContent":["/* a button that when pressed diplayes a loding animation */\nimport { StyleSheet, View, Pressable, Text } from 'react-native';\nimport React, { useState } from 'react';\nimport Button from './Button.js';\nimport { DotsLoader } from 'react-native-indicator';\nimport colors from '../../config/colors.js';\n\nexport default function LoadingButton(props){\n\t\tconst [loading, setLoading] = useState(false);\n\t\tconst { \n\t\t\t\ttitle = \"button\",\n\t\t\t\tonPress,\n\t\t\t\tLoader = DotsLoader,\n\t\t\t\tstyleButton = {},\n\t\t\t\tstyleText = {},\n\t\t\t\tstyleLoader = {},\n\t\t} = props;\n\t\t\n\t\tconst handlePress = async () => {\n\t\t\t\tsetLoading(true);\n\t\t\t\tawait onPress()\n\t\t\t\t\t\t.then(setLoading(false));\n\t\t}\n\t\t\n\t\treturn(\n\t\t\t\t<View style={styles.container}>  \n\t\t\t\t\t\t{ loading?\n\t\t\t\t\t\t\t\t<Loader color={colors.btnGreen}\n\t\t\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\t\t\tbetweenSpace={7}\n\t\t\t\t\t\t\t\t\t\t{...props} /> :\n\t\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\t\t\tstyleText={styleText}\n\t\t\t\t\t\t\t\t\t\tstyleButton={styleButton} \n\t\t\t\t\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\t\t\t\t\tonPress={handlePress} \n\t\t\t\t\t\t\t\t\t\t{...props} /> \n\t\t\t\t\t\t} \n\t\t\t\t</View> \n\t\t);\n\n}\n\nconst styles = StyleSheet.create({\n\t\tcontainer: {\n\t\t\t\tbackgroundColor: '#fff',\n\t\t\t\talignItems: 'center',\n\t\t\t\tjustifyContent: 'center',\n\t\t},\n});\n\t\n"]},"metadata":{},"sourceType":"module"}