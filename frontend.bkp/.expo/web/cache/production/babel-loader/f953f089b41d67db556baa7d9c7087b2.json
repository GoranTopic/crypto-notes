{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _extends2 from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"initialRouteName\",\"backBehavior\",\"children\",\"screenListeners\",\"screenOptions\"],_excluded2=[\"swipeEnabled\",\"lazy\",\"lazyPlaceholder\",\"lazyPreloadDistance\",\"tabBarOptions\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{createNavigatorFactory,TabRouter,useNavigationBuilder}from'@react-navigation/native';import*as React from'react';import warnOnce from'warn-once';import MaterialTopTabView from\"../views/MaterialTopTabView\";function MaterialTopTabNavigator(_ref){var initialRouteName=_ref.initialRouteName,backBehavior=_ref.backBehavior,children=_ref.children,screenListeners=_ref.screenListeners,screenOptions=_ref.screenOptions,restWithDeprecated=_objectWithoutProperties(_ref,_excluded);var swipeEnabled=restWithDeprecated.swipeEnabled,lazy=restWithDeprecated.lazy,lazyPlaceholder=restWithDeprecated.lazyPlaceholder,lazyPreloadDistance=restWithDeprecated.lazyPreloadDistance,tabBarOptions=restWithDeprecated.tabBarOptions,rest=_objectWithoutProperties(restWithDeprecated,_excluded2);var defaultScreenOptions={};if(tabBarOptions){_extends2(defaultScreenOptions,{tabBarActiveTintColor:tabBarOptions.activeTintColor,tabBarInactiveTintColor:tabBarOptions.inactiveTintColor,tabBarPressColor:tabBarOptions.pressColor,tabBarPressOpacity:tabBarOptions.pressOpacity,tabBarShowLabel:tabBarOptions.showLabel,tabBarShowIcon:tabBarOptions.showIcon,tabBarAllowFontScaling:tabBarOptions.allowFontScaling,tabBarBounces:tabBarOptions.bounces,tabBarScrollEnabled:tabBarOptions.scrollEnabled,tabBarIconStyle:tabBarOptions.iconStyle,tabBarLabelStyle:tabBarOptions.labelStyle,tabBarItemStyle:tabBarOptions.tabStyle,tabBarBadge:tabBarOptions.renderBadge,tabBarIndicator:tabBarOptions.renderIndicator,tabBarIndicatorStyle:tabBarOptions.indicatorStyle,tabBarIndicatorContainerStyle:tabBarOptions.indicatorContainerStyle,tabBarContentContainerStyle:tabBarOptions.contentContainerStyle,tabBarStyle:tabBarOptions.style});Object.keys(defaultScreenOptions).forEach(function(key){if(defaultScreenOptions[key]===undefined){delete defaultScreenOptions[key];}});warnOnce(tabBarOptions,\"Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\"+JSON.stringify(defaultScreenOptions,null,2)+\"\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.\");}var deprecatedProps={swipeEnabled:swipeEnabled,lazy:lazy,lazyPlaceholder:lazyPlaceholder,lazyPreloadDistance:lazyPreloadDistance};Object.entries(deprecatedProps).forEach(function(_ref2){var _ref3=_slicedToArray(_ref2,2),propName=_ref3[0],propValue=_ref3[1];if(propValue!==undefined){defaultScreenOptions[propName]=propValue;warnOnce(true,\"Material Top Tab Navigator: '\"+propName+\"' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#\"+propName.toLowerCase()+\" for more details.\");}});var _useNavigationBuilder=useNavigationBuilder(TabRouter,{initialRouteName:initialRouteName,backBehavior:backBehavior,children:children,screenListeners:screenListeners,screenOptions:screenOptions,defaultScreenOptions:defaultScreenOptions}),state=_useNavigationBuilder.state,descriptors=_useNavigationBuilder.descriptors,navigation=_useNavigationBuilder.navigation,NavigationContent=_useNavigationBuilder.NavigationContent;return React.createElement(NavigationContent,null,React.createElement(MaterialTopTabView,_extends({},rest,{state:state,navigation:navigation,descriptors:descriptors})));}export default createNavigatorFactory(MaterialTopTabNavigator);","map":{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["restWithDeprecated","rest","defaultScreenOptions","Object","tabBarActiveTintColor","tabBarOptions","tabBarInactiveTintColor","tabBarPressColor","tabBarPressOpacity","tabBarShowLabel","tabBarShowIcon","tabBarAllowFontScaling","tabBarBounces","tabBarScrollEnabled","tabBarIconStyle","tabBarLabelStyle","tabBarItemStyle","tabBarBadge","tabBarIndicator","tabBarIndicatorStyle","tabBarIndicatorContainerStyle","tabBarContentContainerStyle","tabBarStyle","style","key","warnOnce","JSON","deprecatedProps","swipeEnabled","lazy","lazyPlaceholder","lazyPreloadDistance","propValue","propName","NavigationContent","useNavigationBuilder","initialRouteName","backBehavior","children","screenListeners","screenOptions","descriptors","createNavigatorFactory"],"mappings":"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","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationEventMap,\n  MaterialTopTabNavigationOptions,\n} from '../types';\nimport MaterialTopTabView from '../views/MaterialTopTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap\n> &\n  TabRouterOptions &\n  MaterialTopTabNavigationConfig;\n\nfunction MaterialTopTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: swipeEnabled is deprecated\n    swipeEnabled,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: lazyPlaceholder is deprecated\n    lazyPlaceholder,\n    // @ts-expect-error: lazyPreloadDistance is deprecated\n    lazyPreloadDistance,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: MaterialTopTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style,\n    });\n\n    (\n      Object.keys(\n        defaultScreenOptions\n      ) as (keyof MaterialTopTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.`\n    );\n  }\n\n  const deprecatedProps = {\n    swipeEnabled,\n    lazy,\n    lazyPlaceholder,\n    lazyPreloadDistance,\n  } as const;\n\n  Object.entries(deprecatedProps).forEach(([propName, propValue]) => {\n    if (propValue !== undefined) {\n      // @ts-expect-error: Object.entries doesn't return strict types\n      defaultScreenOptions[propName] = propValue;\n\n      warnOnce(\n        true,\n        `Material Top Tab Navigator: '${propName}' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#${propName.toLowerCase()} for more details.`\n      );\n    }\n  });\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      MaterialTopTabNavigationOptions,\n      MaterialTopTabNavigationEventMap\n    >(TabRouter, {\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <MaterialTopTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap,\n  typeof MaterialTopTabNavigator\n>(MaterialTopTabNavigator);\n"]},"metadata":{},"sourceType":"module"}