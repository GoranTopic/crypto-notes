{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"config\"];import React from'react';import{LoggerProvider}from\"./contexts\";import{ToastUI}from\"./ToastUI\";import{useToast}from\"./useToast\";var ToastRoot=React.forwardRef(function(props,ref){var config=props.config,defaultOptions=_objectWithoutProperties(props,_excluded);var _useToast=useToast({defaultOptions:defaultOptions}),show=_useToast.show,hide=_useToast.hide,isVisible=_useToast.isVisible,options=_useToast.options,data=_useToast.data;React.useImperativeHandle(ref,React.useCallback(function(){return{show:show,hide:hide};},[hide,show]));return React.createElement(ToastUI,{isVisible:isVisible,options:options,data:data,hide:hide,show:show,config:config});});var refs=[];function addNewRef(newRef){refs.push({current:newRef});}function removeOldRef(oldRef){refs=refs.filter(function(r){return r.current!==oldRef;});}export function Toast(props){var toastRef=React.useRef(null);var setRef=React.useCallback(function(ref){if(ref){toastRef.current=ref;addNewRef(ref);}else{removeOldRef(toastRef.current);}},[]);return React.createElement(LoggerProvider,{enableLogs:false},React.createElement(ToastRoot,_extends({ref:setRef},props)));}function getRef(){var reversePriority=_toConsumableArray(refs).reverse();var activeRef=reversePriority.find(function(ref){return(ref==null?void 0:ref.current)!==null;});if(!activeRef){return null;}return activeRef.current;}Toast.show=function(params){var _getRef;(_getRef=getRef())==null?void 0:_getRef.show(params);};Toast.hide=function(params){var _getRef2;(_getRef2=getRef())==null?void 0:_getRef2.hide(params);};","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/node_modules/react-native-toast-message/lib/src/Toast.js"],"names":["React","LoggerProvider","ToastUI","useToast","ToastRoot","forwardRef","props","ref","config","defaultOptions","show","hide","isVisible","options","data","useImperativeHandle","useCallback","refs","addNewRef","newRef","push","current","removeOldRef","oldRef","filter","r","Toast","toastRef","useRef","setRef","getRef","reversePriority","reverse","activeRef","find","params"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { LoggerProvider } from './contexts';\nimport { ToastUI } from './ToastUI';\nimport { useToast } from './useToast';\nconst ToastRoot = React.forwardRef((props, ref) => {\n    const { config, ...defaultOptions } = props;\n    const { show, hide, isVisible, options, data } = useToast({\n        defaultOptions\n    });\n    // This must use useCallback to ensure the ref doesn't get set to null and then a new ref every render.\n    React.useImperativeHandle(ref, React.useCallback(() => ({\n        show,\n        hide\n    }), [hide, show]));\n    return (<ToastUI isVisible={isVisible} options={options} data={data} hide={hide} show={show} config={config}/>);\n});\nlet refs = [];\n/**\n * Adds a ref to the end of the array, which will be used to show the toasts until its ref becomes null.\n *\n * @param newRef the new ref, which must be stable for the life of the Toast instance.\n */\nfunction addNewRef(newRef) {\n    refs.push({\n        current: newRef\n    });\n}\n/**\n * Removes the passed in ref from the file-level refs array using a strict equality check.\n *\n * @param oldRef the exact ref object to remove from the refs array.\n */\nfunction removeOldRef(oldRef) {\n    refs = refs.filter((r) => r.current !== oldRef);\n}\nexport function Toast(props) {\n    const toastRef = React.useRef(null);\n    /*\n      This must use `useCallback` to ensure the ref doesn't get set to null and then a new ref every render.\n      Failure to do so will cause whichever Toast *renders or re-renders* last to be the instance that is used,\n      rather than being the Toast that was *mounted* last.\n    */\n    const setRef = React.useCallback((ref) => {\n        // Since we know there's a ref, we'll update `refs` to use it.\n        if (ref) {\n            // store the ref in this toast instance to be able to remove it from the array later when the ref becomes null.\n            toastRef.current = ref;\n            addNewRef(ref);\n        }\n        else {\n            // remove the this toast's ref, wherever it is in the array.\n            removeOldRef(toastRef.current);\n        }\n    }, []);\n    return (<LoggerProvider enableLogs={false}>\n      <ToastRoot ref={setRef} {...props}/>\n    </LoggerProvider>);\n}\n/**\n * Get the active Toast instance `ref`, by priority.\n * The \"highest\" Toast in the `View` hierarchy has the highest priority.\n *\n * For example, a Toast inside a `Modal`, would have had its ref set later than a Toast inside App's Root.\n * Therefore, the library knows that it is currently visible on top of the App's Root\n * and will thus use the `Modal`'s Toast when showing/hiding.\n *\n * ```js\n * <>\n *  <Toast />\n *  <Modal>\n *    <Toast />\n *  </Modal>\n * </>\n * ```\n */\nfunction getRef() {\n    const reversePriority = [...refs].reverse();\n    const activeRef = reversePriority.find((ref) => ref?.current !== null);\n    if (!activeRef) {\n        return null;\n    }\n    return activeRef.current;\n}\nToast.show = (params) => {\n    getRef()?.show(params);\n};\nToast.hide = (params) => {\n    getRef()?.hide(params);\n};\n"]},"metadata":{},"sourceType":"module"}