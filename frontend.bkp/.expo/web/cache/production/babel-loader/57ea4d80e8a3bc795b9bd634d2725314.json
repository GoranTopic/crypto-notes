{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import React from'react';import PropTypes from'prop-types';import Animated from\"react-native-web/dist/exports/Animated\";import{Surface}from'@react-native-community/art';import AnimatedCircle from\"../animated/AnimatedCircle\";import{color}from\"../const\";var BreathingLoader=function(_React$PureComponent){_inherits(BreathingLoader,_React$PureComponent);var _super=_createSuper(BreathingLoader);function BreathingLoader(props){var _this;_classCallCheck(this,BreathingLoader);_this=_super.call(this,props);_this._animation=function(){Animated.sequence([Animated.timing(_this.state.scale,{toValue:1,duration:_this.props.frequency,useNativeDriver:false}),Animated.timing(_this.state.scale,{toValue:0.1,duration:_this.props.frequency,useNativeDriver:false})]).start(function(){!_this.unmounted&&_this._animation();});};_this.state={scale:new Animated.Value(0.1)};return _this;}_createClass(BreathingLoader,[{key:\"componentDidMount\",value:function componentDidMount(){this._animation();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.unmounted=true;}},{key:\"render\",value:function render(){var _this$props=this.props,color=_this$props.color,size=_this$props.size,strokeWidth=_this$props.strokeWidth;return React.createElement(Surface,{width:size+strokeWidth,height:size+strokeWidth},React.createElement(AnimatedCircle,{radius:size,stroke:color,strokeWidth:strokeWidth,scale:this.state.scale,x:(size+strokeWidth)/2,y:(size+strokeWidth)/2}));}}]);return BreathingLoader;}(React.PureComponent);BreathingLoader.propTypes={color:PropTypes.string,size:PropTypes.number,strokeWidth:PropTypes.number,frequency:PropTypes.number};BreathingLoader.defaultProps={color:color,size:30,strokeWidth:3,frequency:800};export{BreathingLoader as default};","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/node_modules/react-native-indicator/lib/loader/BreathingLoader.js"],"names":["React","PropTypes","Surface","AnimatedCircle","color","BreathingLoader","props","_animation","Animated","sequence","timing","state","scale","toValue","duration","frequency","useNativeDriver","start","unmounted","Value","size","strokeWidth","PureComponent","propTypes","string","number","defaultProps"],"mappings":"qgCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,C,6DAEA,OAASC,OAAT,KAAwB,6BAAxB,CACA,MAAOC,CAAAA,cAAP,kCACA,OAASC,KAAT,gB,GAEqBC,CAAAA,e,yHAenB,yBAAYC,KAAZ,CAAmB,iDACjB,uBAAMA,KAAN,EADiB,MAenBC,UAfmB,CAeN,UAAM,CACjBC,QAAQ,CAACC,QAAT,CAAkB,CAChBD,QAAQ,CAACE,MAAT,CAAgB,MAAKC,KAAL,CAAWC,KAA3B,CAAkC,CAChCC,OAAO,CAAE,CADuB,CAEhCC,QAAQ,CAAE,MAAKR,KAAL,CAAWS,SAFW,CAGhCC,eAAe,CAAE,KAHe,CAAlC,CADgB,CAMhBR,QAAQ,CAACE,MAAT,CAAgB,MAAKC,KAAL,CAAWC,KAA3B,CAAkC,CAChCC,OAAO,CAAE,GADuB,CAEhCC,QAAQ,CAAE,MAAKR,KAAL,CAAWS,SAFW,CAGhCC,eAAe,CAAE,KAHe,CAAlC,CANgB,CAAlB,EAWGC,KAXH,CAWS,UAAM,CACb,CAAC,MAAKC,SAAN,EAAmB,MAAKX,UAAL,EAAnB,CACD,CAbD,EAcD,CA9BkB,CAEjB,MAAKI,KAAL,CAAa,CACXC,KAAK,CAAE,GAAIJ,CAAAA,QAAQ,CAACW,KAAb,CAAmB,GAAnB,CADI,CAAb,CAFiB,aAKlB,C,6DAED,4BAAoB,CAClB,KAAKZ,UAAL,GACD,C,oCAED,+BAAuB,CACrB,KAAKW,SAAL,CAAiB,IAAjB,CACD,C,sBAmBD,iBAAS,CACP,gBAAqC,KAAKZ,KAA1C,CAAQF,KAAR,aAAQA,KAAR,CAAegB,IAAf,aAAeA,IAAf,CAAqBC,WAArB,aAAqBA,WAArB,CACA,MACE,qBAAC,OAAD,EAAS,KAAK,CAAED,IAAI,CAAGC,WAAvB,CAAoC,MAAM,CAAED,IAAI,CAAGC,WAAnD,EACE,oBAAC,cAAD,EACE,MAAM,CAAED,IADV,CAEE,MAAM,CAAEhB,KAFV,CAGE,WAAW,CAAEiB,WAHf,CAIE,KAAK,CAAE,KAAKV,KAAL,CAAWC,KAJpB,CAKE,CAAC,CAAE,CAACQ,IAAI,CAAGC,WAAR,EAAuB,CAL5B,CAME,CAAC,CAAE,CAACD,IAAI,CAAGC,WAAR,EAAuB,CAN5B,EADF,CADF,CAYD,C,6BA7D0CrB,KAAK,CAACsB,a,EAA9BjB,e,CACZkB,S,CAAY,CACjBnB,KAAK,CAAEH,SAAS,CAACuB,MADA,CAEjBJ,IAAI,CAAEnB,SAAS,CAACwB,MAFC,CAGjBJ,WAAW,CAAEpB,SAAS,CAACwB,MAHN,CAIjBV,SAAS,CAAEd,SAAS,CAACwB,MAJJ,C,CADApB,e,CAQZqB,Y,CAAe,CACpBtB,KAAK,CAALA,KADoB,CAEpBgB,IAAI,CAAE,EAFc,CAGpBC,WAAW,CAAE,CAHO,CAIpBN,SAAS,CAAE,GAJS,C,QARHV,e","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated } from 'react-native';\nimport { Surface } from '@react-native-community/art';\nimport AnimatedCircle from '../animated/AnimatedCircle';\nimport { color } from '../const';\n\nexport default class BreathingLoader extends React.PureComponent {\n  static propTypes = {\n    color: PropTypes.string,\n    size: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    frequency: PropTypes.number,\n  };\n\n  static defaultProps = {\n    color,\n    size: 30,\n    strokeWidth: 3,\n    frequency: 800,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      scale: new Animated.Value(0.1),\n    };\n  }\n\n  componentDidMount() {\n    this._animation();\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  _animation = () => {\n    Animated.sequence([\n      Animated.timing(this.state.scale, {\n        toValue: 1,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.scale, {\n        toValue: 0.1,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n    ]).start(() => {\n      !this.unmounted && this._animation();\n    });\n  };\n\n  render() {\n    const { color, size, strokeWidth } = this.props;\n    return (\n      <Surface width={size + strokeWidth} height={size + strokeWidth}>\n        <AnimatedCircle\n          radius={size}\n          stroke={color}\n          strokeWidth={strokeWidth}\n          scale={this.state.scale}\n          x={(size + strokeWidth) / 2}\n          y={(size + strokeWidth) / 2}\n        />\n      </Surface>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}