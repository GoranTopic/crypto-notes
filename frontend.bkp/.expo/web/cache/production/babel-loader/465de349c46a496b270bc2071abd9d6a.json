{"ast":null,"code":"import React from'react';import{noop}from\"../utils/func\";var LoggerContext=React.createContext({log:noop});function LoggerProvider(_ref){var children=_ref.children,_ref$enableLogs=_ref.enableLogs,enableLogs=_ref$enableLogs===void 0?false:_ref$enableLogs;var log=React.useCallback(function(){if(enableLogs){var _console;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}(_console=console).log.apply(_console,['Toast:'].concat(args));}},[enableLogs]);var value={log:log};return React.createElement(LoggerContext.Provider,{value:value},children);}function useLogger(){var ctx=React.useContext(LoggerContext);return ctx;}export{LoggerProvider,useLogger};","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/node_modules/react-native-toast-message/lib/src/contexts/LoggerContext.js"],"names":["React","noop","LoggerContext","createContext","log","LoggerProvider","children","enableLogs","useCallback","args","console","value","useLogger","ctx","useContext"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,qBACA,GAAMC,CAAAA,aAAa,CAAGF,KAAK,CAACG,aAAN,CAAoB,CACtCC,GAAG,CAAEH,IADiC,CAApB,CAAtB,CAGA,QAASI,CAAAA,cAAT,MAA0D,IAAhCC,CAAAA,QAAgC,MAAhCA,QAAgC,sBAAtBC,UAAsB,CAAtBA,UAAsB,0BAAT,KAAS,iBACtD,GAAMH,CAAAA,GAAG,CAAGJ,KAAK,CAACQ,WAAN,CAAkB,UAAa,CACvC,GAAID,UAAJ,CAAgB,4CADcE,IACd,0CADcA,IACd,wBAEZ,UAAAC,OAAO,EAACN,GAAR,iBAAY,QAAZ,SAAyBK,IAAzB,GACH,CACJ,CALW,CAKT,CAACF,UAAD,CALS,CAAZ,CAMA,GAAMI,CAAAA,KAAK,CAAG,CACVP,GAAG,CAAHA,GADU,CAAd,CAGA,MAAQ,qBAAC,aAAD,CAAe,QAAf,EAAwB,KAAK,CAAEO,KAA/B,EAAuCL,QAAvC,CAAR,CACH,CACD,QAASM,CAAAA,SAAT,EAAqB,CACjB,GAAMC,CAAAA,GAAG,CAAGb,KAAK,CAACc,UAAN,CAAiBZ,aAAjB,CAAZ,CACA,MAAOW,CAAAA,GAAP,CACH,CACD,OAASR,cAAT,CAAyBO,SAAzB","sourcesContent":["import React from 'react';\nimport { noop } from '../utils/func';\nconst LoggerContext = React.createContext({\n    log: noop\n});\nfunction LoggerProvider({ children, enableLogs = false }) {\n    const log = React.useCallback((...args) => {\n        if (enableLogs) {\n            // eslint-disable-next-line no-console\n            console.log('Toast:', ...args);\n        }\n    }, [enableLogs]);\n    const value = {\n        log\n    };\n    return (<LoggerContext.Provider value={value}>{children}</LoggerContext.Provider>);\n}\nfunction useLogger() {\n    const ctx = React.useContext(LoggerContext);\n    return ctx;\n}\nexport { LoggerProvider, useLogger };\n"]},"metadata":{},"sourceType":"module"}