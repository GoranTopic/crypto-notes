{"ast":null,"code":"'use strict';\n\nimport NativePlatformConstantsAndroid from \"./NativePlatformConstantsAndroid\";\nvar Platform = {\n  __constants: null,\n  OS: 'android',\n\n  get Version() {\n    return this.constants.Version;\n  },\n\n  get constants() {\n    if (this.__constants == null) {\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n\n    return this.__constants;\n  },\n\n  get isTesting() {\n    if (__DEV__) {\n      return this.constants.isTesting;\n    }\n\n    return false;\n  },\n\n  get isTV() {\n    return this.constants.uiMode === 'tv';\n  },\n\n  select: function select(spec) {\n    return 'android' in spec ? spec.android : 'native' in spec ? spec.native : spec.default;\n  }\n};\nmodule.exports = Platform;","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/node_modules/react-native/Libraries/Utilities/Platform.js"],"names":["NativePlatformConstantsAndroid","Platform","__constants","OS","Version","constants","getConstants","isTesting","__DEV__","isTV","uiMode","select","spec","android","native","default","module","exports"],"mappings":"AAUA;;AAEA,OAAOA,8BAAP;AASA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,WAAW,EAAE,IADE;AAEfC,EAAAA,EAAE,EAAE,SAFW;;AAIf,MAAIC,OAAJ,GAAsB;AACpB,WAAO,KAAKC,SAAL,CAAeD,OAAtB;AACD,GANc;;AAQf,MAAIC,SAAJ,GAiBG;AACD,QAAI,KAAKH,WAAL,IAAoB,IAAxB,EAA8B;AAC5B,WAAKA,WAAL,GAAmBF,8BAA8B,CAACM,YAA/B,EAAnB;AACD;;AACD,WAAO,KAAKJ,WAAZ;AACD,GA9Bc;;AAgCf,MAAIK,SAAJ,GAAyB;AACvB,QAAIC,OAAJ,EAAa;AACX,aAAO,KAAKH,SAAL,CAAeE,SAAtB;AACD;;AACD,WAAO,KAAP;AACD,GArCc;;AAuCf,MAAIE,IAAJ,GAAoB;AAClB,WAAO,KAAKJ,SAAL,CAAeK,MAAf,KAA0B,IAAjC;AACD,GAzCc;;AA0CfC,EAAAA,MAAM,EAAE,gBAAUC,IAAV;AAAA,WACN,aAAaA,IAAb,GACIA,IAAI,CAACC,OADT,GAEI,YAAYD,IAAZ,GACAA,IAAI,CAACE,MADL,GAEAF,IAAI,CAACG,OALH;AAAA;AA1CO,CAAjB;AAkDAC,MAAM,CAACC,OAAP,GAAiBhB,QAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport NativePlatformConstantsAndroid from './NativePlatformConstantsAndroid';\n\nexport type PlatformSelectSpec<A, N, D> = {\n  android?: A,\n  native?: N,\n  default?: D,\n  ...\n};\n\nconst Platform = {\n  __constants: null,\n  OS: 'android',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version(): number {\n    return this.constants.Version;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants(): {|\n    isTesting: boolean,\n    reactNativeVersion: {|\n      major: number,\n      minor: number,\n      patch: number,\n      prerelease: ?number,\n    |},\n    Version: number,\n    Release: string,\n    Serial: string,\n    Fingerprint: string,\n    Model: string,\n    ServerHost?: string,\n    uiMode: string,\n    Brand: string,\n    Manufacturer: string,\n  |} {\n    if (this.__constants == null) {\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting(): boolean {\n    if (__DEV__) {\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV(): boolean {\n    return this.constants.uiMode === 'tv';\n  },\n  select: <A, N, D>(spec: PlatformSelectSpec<A, N, D>): A | N | D =>\n    'android' in spec\n      ? spec.android\n      : 'native' in spec\n      ? spec.native\n      : spec.default,\n};\n\nmodule.exports = Platform;\n"]},"metadata":{},"sourceType":"module"}