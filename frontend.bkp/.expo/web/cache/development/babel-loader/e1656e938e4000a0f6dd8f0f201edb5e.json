{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GiftedChat } from 'react-native-gifted-chat';\nexport default function ChatView(_ref) {\n  var socket = _ref.socket,\n      contact = _ref.contact;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  useEffect(function () {\n    socket.emit(\"load-messages\");\n    socket.on(\"load-messages\", function (messages) {\n      console.log('loaded msessages');\n      setMessages(function (previousMessages) {\n        return GiftedChat.append(previousMessages, messages);\n      });\n    });\n    socket.on(\"message\", function (message) {\n      console.log('recived message');\n      setMessages(function (previousMessages) {\n        return GiftedChat.append(previousMessages, message);\n      });\n    });\n  }, []);\n\n  var _onSend = useCallback(function () {\n    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    console.log(\"sending message to:\" + contact.userID);\n    messages.forEach(function (message) {\n      message.to = contact;\n    });\n    socket.emit('message', messages);\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, messages);\n    });\n  }, []);\n\n  return React.createElement(GiftedChat, {\n    messages: messages,\n    onSend: function onSend(message) {\n      return _onSend(message);\n    },\n    user: {\n      _id: socket.id\n    }\n  });\n}","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/src/components/ChatView.js"],"names":["React","useState","useCallback","useEffect","GiftedChat","ChatView","socket","contact","messages","setMessages","emit","on","console","log","previousMessages","append","message","onSend","userID","forEach","to","_id","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;;;;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,eAAe,SAASC,QAAT,OAAsC;AAAA,MAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,MAAVC,OAAU,QAAVA,OAAU;;AACnD,kBAAgCN,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACdG,IAAAA,MAAM,CAACI,IAAP,CAAY,eAAZ;AACAJ,IAAAA,MAAM,CAACK,EAAP,CAAU,eAAV,EAA2B,UAAAH,QAAQ,EAAI;AACrCI,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAJ,MAAAA,WAAW,CAAC,UAAAK,gBAAgB;AAAA,eAC1BV,UAAU,CAACW,MAAX,CAAkBD,gBAAlB,EAAoCN,QAApC,CAD0B;AAAA,OAAjB,CAAX;AAED,KAJD;AAKAF,IAAAA,MAAM,CAACK,EAAP,CAAU,SAAV,EAAqB,UAAAK,OAAO,EAAI;AAC9BJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAJ,MAAAA,WAAW,CAAC,UAAAK,gBAAgB;AAAA,eAC1BV,UAAU,CAACW,MAAX,CAAkBD,gBAAlB,EAAoCE,OAApC,CAD0B;AAAA,OAAjB,CAAX;AAED,KAJD;AAKD,GAZQ,EAYN,EAZM,CAAT;;AAcA,MAAMC,OAAM,GAAGf,WAAW,CAAC,YAAmB;AAAA,QAAlBM,QAAkB,uEAAP,EAAO;AAC5CI,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBN,OAAO,CAACW,MAA5C;AACAV,IAAAA,QAAQ,CAACW,OAAT,CAAiB,UAAAH,OAAO,EAAI;AAAEA,MAAAA,OAAO,CAACI,EAAR,GAAab,OAAb;AAAsB,KAApD;AACAD,IAAAA,MAAM,CAACI,IAAP,CAAY,SAAZ,EAAuBF,QAAvB;AACAC,IAAAA,WAAW,CAAC,UAAAK,gBAAgB;AAAA,aAAIV,UAAU,CAACW,MAAX,CAAkBD,gBAAlB,EAAoCN,QAApC,CAAJ;AAAA,KAAjB,CAAX;AACD,GALyB,EAKvB,EALuB,CAA1B;;AAOA,SACE,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAEA,QADZ;AAEE,IAAA,MAAM,EAAE,gBAAAQ,OAAO;AAAA,aAAIC,OAAM,CAACD,OAAD,CAAV;AAAA,KAFjB;AAGE,IAAA,IAAI,EAAE;AACJK,MAAAA,GAAG,EAAEf,MAAM,CAACgB;AADR;AAHR,IADF;AASD","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport { StyleSheet, Text, View } from 'react-native';\nimport { GiftedChat } from 'react-native-gifted-chat'\n\nexport default function ChatView({ socket, contact }){\n\t\tconst [messages, setMessages] = useState([]);\n\t\t\n\t\tuseEffect(() => {\n\t\t\t\tsocket.emit(\"load-messages\");\n\t\t\t\tsocket.on(\"load-messages\", messages => {\n\t\t\t\t\t\tconsole.log('loaded msessages');\n\t\t\t\t\t\tsetMessages(previousMessages => \n\t\t\t\t\t\t\t\tGiftedChat.append(previousMessages, messages))\n\t\t\t\t});\n\t\t\t\tsocket.on(\"message\", message => {\n\t\t\t\t\t\tconsole.log('recived message');\n\t\t\t\t\t\tsetMessages(previousMessages => \n\t\t\t\t\t\t\t\tGiftedChat.append(previousMessages, message))\n\t\t\t\t});\n\t\t}, []);\n\n\t\tconst onSend = useCallback((messages = []) => {\n\t\t\t\tconsole.log(\"sending message to:\" + contact.userID);\n\t\t\t\tmessages.forEach(message => { message.to = contact });\n\t\t\t\tsocket.emit('message', messages);\n\t\t\t\tsetMessages(previousMessages => GiftedChat.append(previousMessages, messages));\n\t\t}, [])\n\n\t\treturn (\n\t\t\t\t<GiftedChat\n\t\t\t\t\t\tmessages={messages}\n\t\t\t\t\t\tonSend={message => onSend(message)}\n\t\t\t\t\t\tuser={{\n\t\t\t\t\t\t\t\t_id: socket.id,\n\t\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t)\n}\n\n"]},"metadata":{},"sourceType":"module"}