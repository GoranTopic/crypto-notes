{"ast":null,"code":"import React,{useState,useEffect}from'react';import{connect}from'react-redux';import{mapStateToProps,mapDispatchToProps}from\"../state/mappers.js\";import{createDrawerNavigator}from'@react-navigation/drawer';import{createStackNavigator}from'@react-navigation/stack';import UserDrawer from\"./UserDrawer.js\";var Stack=createStackNavigator();var RootStack=function RootStack(props){return React.createElement(React.Fragment,null,React.createElement(Stack.Navigator,null,React.createElement(Stack.Screen,{name:\"UserDrawer\",component:UserDrawer,options:{headerShown:false}})));};export default connect(mapStateToProps,mapDispatchToProps)(RootStack);","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/src/navigation/LoggedInRootStack.js"],"names":["React","useState","useEffect","connect","mapStateToProps","mapDispatchToProps","createDrawerNavigator","createStackNavigator","UserDrawer","Stack","RootStack","props","headerShown"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,eAAT,CAA0BC,kBAA1B,2BACA,OAASC,qBAAT,KAAsC,0BAAtC,CACA,OAASC,oBAAT,KAAqC,yBAArC,CACA,MAAOC,CAAAA,UAAP,uBAEA,GAAMC,CAAAA,KAAK,CAAGF,oBAAoB,EAAlC,CAKA,GAAMG,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAC,KAAK,QAAI,yCACzB,oBAAC,KAAD,CAAO,SAAP,MACE,oBAAC,KAAD,CAAO,MAAP,EAAc,IAAI,CAAC,YAAnB,CACE,SAAS,CAAEH,UADb,CAEE,OAAO,CAAE,CAAEI,WAAW,CAAE,KAAf,CAFX,EADF,CADyB,CAAJ,EAAvB,CAQA,cAAeT,CAAAA,OAAO,CAACC,eAAD,CAAkBC,kBAAlB,CAAP,CAA6CK,SAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { mapStateToProps, mapDispatchToProps } from '../state/mappers.js';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport UserDrawer from './UserDrawer.js';\n\nconst Stack = createStackNavigator();\n\n// render this stack if user is logged In\n/* this navigator defines the routes for a logged in user, \n * it provide the user logged in context information */\nconst RootStack = props => <>\n\t\t<Stack.Navigator>\n\t\t\t\t<Stack.Screen name=\"UserDrawer\"\n\t\t\t\t\t\tcomponent={UserDrawer}\n\t\t\t\t\t\toptions={{ headerShown: false }} />  \n\t\t</Stack.Navigator>  \n</>\n \nexport default connect(mapStateToProps, mapDispatchToProps)(RootStack);\n\n"]},"metadata":{},"sourceType":"module"}