{"ast":null,"code":"import React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import{additiveInverseArray}from\"../utils/array\";import{useKeyboard}from\"./useKeyboard\";export function translateYOutputRangeFor(_ref){var position=_ref.position,height=_ref.height,topOffset=_ref.topOffset,bottomOffset=_ref.bottomOffset,keyboardHeight=_ref.keyboardHeight,keyboardOffset=_ref.keyboardOffset;var offset=position==='bottom'?bottomOffset:topOffset;var keyboardAwareOffset=position==='bottom'?keyboardHeight+keyboardOffset:0;var range=[-(height*2),Math.max(offset,keyboardAwareOffset)];var outputRange=position==='bottom'?additiveInverseArray(range):range;return outputRange;}export function useSlideAnimation(_ref2){var position=_ref2.position,height=_ref2.height,topOffset=_ref2.topOffset,bottomOffset=_ref2.bottomOffset,keyboardOffset=_ref2.keyboardOffset;var animatedValue=React.useRef(new Animated.Value(0));var _useKeyboard=useKeyboard(),keyboardHeight=_useKeyboard.keyboardHeight;var animate=React.useCallback(function(toValue){Animated.spring(animatedValue.current,{toValue:toValue,useNativeDriver:true,friction:8}).start();},[]);var translateY=animatedValue.current.interpolate({inputRange:[0,1],outputRange:translateYOutputRangeFor({position:position,height:height,topOffset:topOffset,bottomOffset:bottomOffset,keyboardHeight:keyboardHeight,keyboardOffset:keyboardOffset})});var opacity=animatedValue.current.interpolate({inputRange:[0,0.7,1],outputRange:[0,1,1]});return{animatedValue:animatedValue,animate:animate,animationStyles:{opacity:opacity,transform:[{translateY:translateY}]}};}","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/node_modules/react-native-toast-message/lib/src/hooks/useSlideAnimation.js"],"names":["React","additiveInverseArray","useKeyboard","translateYOutputRangeFor","position","height","topOffset","bottomOffset","keyboardHeight","keyboardOffset","offset","keyboardAwareOffset","range","Math","max","outputRange","useSlideAnimation","animatedValue","useRef","Animated","Value","animate","useCallback","toValue","spring","current","useNativeDriver","friction","start","translateY","interpolate","inputRange","opacity","animationStyles","transform"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,6DAEA,OAASC,oBAAT,sBACA,OAASC,WAAT,qBACA,MAAO,SAASC,CAAAA,wBAAT,MAAiH,IAA7EC,CAAAA,QAA6E,MAA7EA,QAA6E,CAAnEC,MAAmE,MAAnEA,MAAmE,CAA3DC,SAA2D,MAA3DA,SAA2D,CAAhDC,YAAgD,MAAhDA,YAAgD,CAAlCC,cAAkC,MAAlCA,cAAkC,CAAlBC,cAAkB,MAAlBA,cAAkB,CACpH,GAAMC,CAAAA,MAAM,CAAGN,QAAQ,GAAK,QAAb,CAAwBG,YAAxB,CAAuCD,SAAtD,CACA,GAAMK,CAAAA,mBAAmB,CAAGP,QAAQ,GAAK,QAAb,CAAwBI,cAAc,CAAGC,cAAzC,CAA0D,CAAtF,CACA,GAAMG,CAAAA,KAAK,CAAG,CAAC,EAAEP,MAAM,CAAG,CAAX,CAAD,CAAgBQ,IAAI,CAACC,GAAL,CAASJ,MAAT,CAAiBC,mBAAjB,CAAhB,CAAd,CACA,GAAMI,CAAAA,WAAW,CAAGX,QAAQ,GAAK,QAAb,CAAwBH,oBAAoB,CAACW,KAAD,CAA5C,CAAsDA,KAA1E,CACA,MAAOG,CAAAA,WAAP,CACH,CACD,MAAO,SAASC,CAAAA,iBAAT,OAA0F,IAA7DZ,CAAAA,QAA6D,OAA7DA,QAA6D,CAAnDC,MAAmD,OAAnDA,MAAmD,CAA3CC,SAA2C,OAA3CA,SAA2C,CAAhCC,YAAgC,OAAhCA,YAAgC,CAAlBE,cAAkB,OAAlBA,cAAkB,CAC7F,GAAMQ,CAAAA,aAAa,CAAGjB,KAAK,CAACkB,MAAN,CAAa,GAAIC,CAAAA,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAb,CAAtB,CACA,iBAA2BlB,WAAW,EAAtC,CAAQM,cAAR,cAAQA,cAAR,CACA,GAAMa,CAAAA,OAAO,CAAGrB,KAAK,CAACsB,WAAN,CAAkB,SAACC,OAAD,CAAa,CAC3CJ,QAAQ,CAACK,MAAT,CAAgBP,aAAa,CAACQ,OAA9B,CAAuC,CACnCF,OAAO,CAAPA,OADmC,CAEnCG,eAAe,CAAE,IAFkB,CAGnCC,QAAQ,CAAE,CAHyB,CAAvC,EAIGC,KAJH,GAKH,CANe,CAMb,EANa,CAAhB,CAOA,GAAMC,CAAAA,UAAU,CAAGZ,aAAa,CAACQ,OAAd,CAAsBK,WAAtB,CAAkC,CACjDC,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADqC,CAEjDhB,WAAW,CAAEZ,wBAAwB,CAAC,CAClCC,QAAQ,CAARA,QADkC,CAElCC,MAAM,CAANA,MAFkC,CAGlCC,SAAS,CAATA,SAHkC,CAIlCC,YAAY,CAAZA,YAJkC,CAKlCC,cAAc,CAAdA,cALkC,CAMlCC,cAAc,CAAdA,cANkC,CAAD,CAFY,CAAlC,CAAnB,CAWA,GAAMuB,CAAAA,OAAO,CAAGf,aAAa,CAACQ,OAAd,CAAsBK,WAAtB,CAAkC,CAC9CC,UAAU,CAAE,CAAC,CAAD,CAAI,GAAJ,CAAS,CAAT,CADkC,CAE9ChB,WAAW,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAFiC,CAAlC,CAAhB,CAIA,MAAO,CACHE,aAAa,CAAbA,aADG,CAEHI,OAAO,CAAPA,OAFG,CAGHY,eAAe,CAAE,CACbD,OAAO,CAAPA,OADa,CAEbE,SAAS,CAAE,CACP,CACIL,UAAU,CAAVA,UADJ,CADO,CAFE,CAHd,CAAP,CAYH","sourcesContent":["import React from 'react';\nimport { Animated } from 'react-native';\nimport { additiveInverseArray } from '../utils/array';\nimport { useKeyboard } from './useKeyboard';\nexport function translateYOutputRangeFor({ position, height, topOffset, bottomOffset, keyboardHeight, keyboardOffset }) {\n    const offset = position === 'bottom' ? bottomOffset : topOffset;\n    const keyboardAwareOffset = position === 'bottom' ? keyboardHeight + keyboardOffset : 0;\n    const range = [-(height * 2), Math.max(offset, keyboardAwareOffset)];\n    const outputRange = position === 'bottom' ? additiveInverseArray(range) : range;\n    return outputRange;\n}\nexport function useSlideAnimation({ position, height, topOffset, bottomOffset, keyboardOffset }) {\n    const animatedValue = React.useRef(new Animated.Value(0));\n    const { keyboardHeight } = useKeyboard();\n    const animate = React.useCallback((toValue) => {\n        Animated.spring(animatedValue.current, {\n            toValue,\n            useNativeDriver: true,\n            friction: 8\n        }).start();\n    }, []);\n    const translateY = animatedValue.current.interpolate({\n        inputRange: [0, 1],\n        outputRange: translateYOutputRangeFor({\n            position,\n            height,\n            topOffset,\n            bottomOffset,\n            keyboardHeight,\n            keyboardOffset\n        })\n    });\n    const opacity = animatedValue.current.interpolate({\n        inputRange: [0, 0.7, 1],\n        outputRange: [0, 1, 1]\n    });\n    return {\n        animatedValue,\n        animate,\n        animationStyles: {\n            opacity,\n            transform: [\n                {\n                    translateY\n                }\n            ]\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}