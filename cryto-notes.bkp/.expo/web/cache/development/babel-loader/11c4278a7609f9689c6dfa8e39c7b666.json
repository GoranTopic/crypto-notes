{"ast":null,"code":"import io from \"socket.io-client/dist/socket.io\";\nimport { BASE_API } from '@env';\nexport default function initSocket() {\n  console.log(\"[from inicilizer socket]\");\n  console.log('BASE_API:');\n  console.log(BASE_API);\n  var socket = io(BASE_API, {\n    jsonp: false\n  });\n\n  if (socket) {\n    console.log(\"got socket:\");\n  }\n\n  socket.onAny(function (event) {\n    console.log(\"ANY \" + event);\n  });\n  socket.on(\"connect_error\", function () {\n    setTimeout(function () {\n      socket.connect();\n    }, 1000);\n  });\n  socket.on(\"disconnect\", function (reason) {\n    console.log(\"disconected\");\n  });\n  return socket;\n}","map":{"version":3,"sources":["/home/telix/crypto-notes/cryto-notes/src/inicializers/socket.js"],"names":["io","BASE_API","initSocket","console","log","socket","jsonp","onAny","event","on","setTimeout","connect","reason"],"mappings":"AAAA,OAAOA,EAAP,MAAe,iCAAf;AACA,SAASC,QAAT,QAAyB,MAAzB;AAEA,eAAe,SAASC,UAAT,GAAsB;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,MAAMI,MAAM,GAAGL,EAAE,CAAEC,QAAF,EAAY;AAAEK,IAAAA,KAAK,EAAE;AAAT,GAAZ,CAAjB;;AAEA,MAAGD,MAAH,EAAU;AACRF,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAID;;AAEDC,EAAAA,MAAM,CAACE,KAAP,CAAa,UAACC,KAAD,EAAW;AACtBL,IAAAA,OAAO,CAACC,GAAR,UAAmBI,KAAnB;AACD,GAFD;AAGAH,EAAAA,MAAM,CAACI,EAAP,CAAU,eAAV,EAA2B,YAAM;AAE/BC,IAAAA,UAAU,CAAC,YAAM;AACfL,MAAAA,MAAM,CAACM,OAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAEU,GAJZ;AAKAN,EAAAA,MAAM,CAACI,EAAP,CAAU,YAAV,EAAwB,UAACG,MAAD,EAAY;AAClCT,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD;AAGA,SAAOC,MAAP;AACD","sourcesContent":["import io from \"socket.io-client/dist/socket.io\"; \nimport { BASE_API } from '@env';\n\nexport default function initSocket() {\n\t\tconsole.log(\"[from inicilizer socket]\")\n\t\tconsole.log('BASE_API:');\n\t\tconsole.log(BASE_API);\n\t\tconst socket = io( BASE_API, { jsonp: false } );\n\n\t\tif(socket){\n\t\t\t\tconsole.log(\"got socket:\");\n\t\t\t\t//console.log(socket);\n\t\t\t\t//props.setSocket(socket);\n\t\t\t\t//console.log(\"dispatched socket\");\n\t\t}\n\n\t\tsocket.onAny((event) => {\n\t\t\t\tconsole.log(`ANY ${event}`);\n\t\t});\n\t\tsocket.on(\"connect_error\", () => {  \n\t\t\t\t//console.log(\"connection error\");\n\t\t\t\tsetTimeout(() => {    \n\t\t\t\t\t\tsocket.connect();  \n\t\t\t\t}, 1000);});\n\t\tsocket.on(\"disconnect\", (reason) => {\n\t\t\t\tconsole.log(\"disconected\");\n\t\t});\n\t\treturn socket;\n}\n\n"]},"metadata":{},"sourceType":"module"}