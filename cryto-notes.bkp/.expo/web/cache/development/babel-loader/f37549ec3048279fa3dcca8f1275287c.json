{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState, useCallback } from 'react';\n\nvar RenderContact = function RenderContact(_ref) {\n  var contact = _ref.contact,\n      navigation = _ref.navigation;\n  return React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate('ChatScreen', {\n        contact: contact\n      });\n    }\n  }, React.createElement(Text, null, contact.userID));\n};\n\nfunction ChatListScreen(_ref2) {\n  var socket = _ref2.socket,\n      navigation = _ref2.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      contacts = _useState2[0],\n      setContacts = _useState2[1];\n\n  useEffect(function () {\n    socket.emit(\"get users\");\n    socket.on(\"users\", function (users) {\n      setContacts(users);\n    });\n    socket.on('new user', function (user) {\n      return setContacts(function (previousContacts) {\n        return [].concat(_toConsumableArray(previousContacts), [user]);\n      });\n    });\n  }, []);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(StatusBar, {\n    style: \"auto\"\n  }), React.createElement(Text, null, \"User: \", socket.id), React.createElement(Text, null, \"Contacts List screen\"), contacts.map(function (contact, index) {\n    return React.createElement(RenderContact, {\n      key: contact.userID,\n      navigation: navigation,\n      contact: contact\n    });\n  }));\n}\n\nexport default ChatListScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/home/telix/crypto-note/cryto-note/src/screens/ChatListScreen.js"],"names":["StatusBar","React","useEffect","useState","useCallback","RenderContact","contact","navigation","navigate","userID","ChatListScreen","socket","contacts","setContacts","emit","on","users","user","previousContacts","styles","container","id","map","index","StyleSheet","create","flex","backgroundColor","justifyContent"],"mappings":";;;;;;;AACA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,MAAYC,UAAZ,QAAYA,UAAZ;AAAA,SACpB,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAG;AAAA,aAAMA,UAAU,CAACC,QAAX,CAAoB,YAApB,EAAkC;AAAEF,QAAAA,OAAO,EAAPA;AAAF,OAAlC,CAAN;AAAA;AADZ,KAEE,oBAAC,IAAD,QAAOA,OAAO,CAACG,MAAf,CAFF,CADoB;AAAA,CAAtB;;AAMA,SAASC,cAAT,QAA+C;AAAA,MAArBC,MAAqB,SAArBA,MAAqB;AAAA,MAAbJ,UAAa,SAAbA,UAAa;;AAC7C,kBAAkCJ,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAQS,QAAR;AAAA,MAAkBC,WAAlB;;AAEAX,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,MAAM,CAACG,IAAP,CAAY,WAAZ;AACAH,IAAAA,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmB,UAAAC,KAAK,EAAI;AAE1BH,MAAAA,WAAW,CAACG,KAAD,CAAX;AACD,KAHD;AAIAL,IAAAA,MAAM,CAACI,EAAP,CAAU,UAAV,EAAsB,UAAAE,IAAI;AAAA,aACxBJ,WAAW,CAAC,UAAAK,gBAAgB;AAAA,4CAASA,gBAAT,IAA2BD,IAA3B;AAAA,OAAjB,CADa;AAAA,KAA1B;AAGD,GATQ,EASN,EATM,CAAT;AAWA,SAAO,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACC;AAApB,KACL,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC;AAAjB,IADK,EAGL,oBAAC,IAAD,kBAAaT,MAAM,CAACU,EAApB,CAHK,EAIL,oBAAC,IAAD,+BAJK,EAKHT,QAAQ,CAACU,GAAT,CAAc,UAAChB,OAAD,EAAUiB,KAAV;AAAA,WAChB,oBAAC,aAAD;AACE,MAAA,GAAG,EAAEjB,OAAO,CAACG,MADf;AAEE,MAAA,UAAU,EAAEF,UAFd;AAGE,MAAA,OAAO,EAAED;AAHX,MADgB;AAAA,GAAd,CALG,CAAP;AAaD;;AAED,eAAeI,cAAf;AAEA,IAAMS,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import { StyleSheet, Text, View, TouchableOpacity, Button } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState, useCallback } from 'react';\n\nconst RenderContact = ({ contact, navigation }) => \n\t\t<TouchableOpacity\n\t\t\t\tonPress={ () => navigation.navigate('ChatScreen', { contact }) }>\n\t\t\t\t<Text>{contact.userID}</Text>\n\t\t</TouchableOpacity>\n\nfunction ChatListScreen({ socket, navigation }){  \n\t\tconst [ contacts, setContacts ] = useState([]);\n\n\t\tuseEffect(() => { // query users\n\t\t\t\tsocket.emit(\"get users\");\n\t\t\t\tsocket.on(\"users\", users => {\n\t\t\t\t\t\t//console.log(users);\n\t\t\t\t\t\tsetContacts(users);\n\t\t\t\t});\n\t\t\t\tsocket.on('new user', user => \n\t\t\t\t\t\tsetContacts(previousContacts => [ ...previousContacts, user ])\n\t\t\t\t)\n\t\t}, []);\n\n\t\treturn <View style={styles.container}>\n\t\t\t\t<StatusBar style=\"auto\" />\n\n\t\t\t\t<Text>User: {socket.id}</Text>\n\t\t\t\t<Text>Contacts List screen</Text>\n\t\t\t\t{ contacts.map( (contact, index) => \n\t\t\t\t<RenderContact \n\t\t\t\t\t\tkey={contact.userID}\n\t\t\t\t\t\tnavigation={navigation}\n\t\t\t\t\t\tcontact={contact}  />\n\t\t\t\t) }\n\t\t</View>\n\n}\n\nexport default ChatListScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    //alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}