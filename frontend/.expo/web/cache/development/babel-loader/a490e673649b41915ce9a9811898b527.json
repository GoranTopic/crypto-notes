{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { Surface } from '@react-native-community/art';\nimport AnimatedCircle from \"../animated/AnimatedCircle\";\nimport { color } from \"../const\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar RippleLoader = function (_React$PureComponent) {\n  _inherits(RippleLoader, _React$PureComponent);\n\n  var _super = _createSuper(RippleLoader);\n\n  function RippleLoader() {\n    var _this;\n\n    _classCallCheck(this, RippleLoader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      scales: [new Animated.Value(0.1), new Animated.Value(0.1)],\n      opacities: [new Animated.Value(1), new Animated.Value(1)]\n    };\n    _this.timers = [];\n\n    _this._animation = function (i) {\n      var frequency = _this.props.frequency;\n      Animated.parallel([Animated.timing(_this.state.scales[i], {\n        toValue: 1,\n        duration: frequency,\n        useNativeDriver: false\n      }), Animated.timing(_this.state.opacities[i], {\n        toValue: 0,\n        duration: frequency,\n        delay: frequency / 2,\n        useNativeDriver: false\n      })]).start(function () {\n        if (!_this.unmounted) {\n          _this.state.scales[i].setValue(0.1);\n\n          _this.state.opacities[i].setValue(1);\n\n          _this._animation(i);\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(RippleLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.state.scales.forEach(function (item, i) {\n        var id = setTimeout(function () {\n          _this2._animation(i);\n        }, i * _this2.props.frequency * 0.75);\n\n        _this2.timers.push(id);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unmounted = true;\n      this.timers.forEach(function (id) {\n        clearTimeout(id);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          size = _this$props.size,\n          strokeWidth = _this$props.strokeWidth;\n      var _this$state = this.state,\n          scales = _this$state.scales,\n          opacities = _this$state.opacities;\n      return _jsx(Surface, {\n        width: size + strokeWidth,\n        height: size + strokeWidth,\n        children: scales.map(function (item, i) {\n          return _jsx(AnimatedCircle, {\n            radius: size,\n            stroke: color,\n            strokeWidth: strokeWidth,\n            scale: scales[i],\n            opacity: opacities[i],\n            x: (size + strokeWidth) / 2,\n            y: (size + strokeWidth) / 2\n          }, i);\n        })\n      });\n    }\n  }]);\n\n  return RippleLoader;\n}(React.PureComponent);\n\nRippleLoader.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  frequency: PropTypes.number\n};\nRippleLoader.defaultProps = {\n  color: color,\n  size: 40,\n  strokeWidth: 3,\n  frequency: 1600\n};\nexport { RippleLoader as default };","map":{"version":3,"sources":["/home/telix/crypto-notes/crypto_notes/node_modules/react-native-indicator/lib/loader/RippleLoader.js"],"names":["React","PropTypes","Surface","AnimatedCircle","color","RippleLoader","state","scales","Animated","Value","opacities","timers","_animation","i","frequency","props","parallel","timing","toValue","duration","useNativeDriver","delay","start","unmounted","setValue","forEach","item","id","setTimeout","push","clearTimeout","size","strokeWidth","map","PureComponent","propTypes","string","number","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated } from 'react-native';\nimport { Surface } from '@react-native-community/art';\nimport AnimatedCircle from '../animated/AnimatedCircle';\nimport { color } from '../const';\n\nexport default class RippleLoader extends React.PureComponent {\n  static propTypes = {\n    color: PropTypes.string,\n    size: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    frequency: PropTypes.number,\n  };\n\n  static defaultProps = {\n    color,\n    size: 40,\n    strokeWidth: 3,\n    frequency: 1600,\n  };\n\n  state = {\n    scales: [new Animated.Value(0.1), new Animated.Value(0.1)],\n    opacities: [new Animated.Value(1), new Animated.Value(1)],\n  };\n  timers = [];\n\n  componentDidMount() {\n    this.state.scales.forEach((item, i) => {\n      const id = setTimeout(() => {\n        this._animation(i);\n      }, i * this.props.frequency * 0.75);\n      this.timers.push(id);\n    });\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n    this.timers.forEach((id) => {\n      clearTimeout(id);\n    });\n  }\n\n  _animation = (i) => {\n    const { frequency } = this.props;\n    Animated.parallel([\n      Animated.timing(this.state.scales[i], {\n        toValue: 1,\n        duration: frequency,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.opacities[i], {\n        toValue: 0,\n        duration: frequency,\n        delay: frequency / 2,\n        useNativeDriver: false,\n      }),\n    ]).start(() => {\n      if (!this.unmounted) {\n        this.state.scales[i].setValue(0.1);\n        this.state.opacities[i].setValue(1);\n        this._animation(i);\n      }\n    });\n  };\n\n  render() {\n    const { color, size, strokeWidth } = this.props;\n    const { scales, opacities } = this.state;\n    return (\n      <Surface width={size + strokeWidth} height={size + strokeWidth}>\n        {scales.map((item, i) => (\n          <AnimatedCircle\n            key={i}\n            radius={size}\n            stroke={color}\n            strokeWidth={strokeWidth}\n            scale={scales[i]}\n            opacity={opacities[i]}\n            x={(size + strokeWidth) / 2}\n            y={(size + strokeWidth) / 2}\n          />\n        ))}\n      </Surface>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}