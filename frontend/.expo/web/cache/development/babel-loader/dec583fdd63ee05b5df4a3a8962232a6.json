{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { Surface, Group } from '@react-native-community/art';\nimport AnimatedCircle from \"../animated/AnimatedCircle\";\nimport { color } from \"../const\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar RotationCircleLoader = function (_React$PureComponent) {\n  _inherits(RotationCircleLoader, _React$PureComponent);\n\n  var _super = _createSuper(RotationCircleLoader);\n\n  function RotationCircleLoader() {\n    var _this;\n\n    _classCallCheck(this, RotationCircleLoader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      degree: new Animated.Value(0)\n    };\n\n    _this._animation = function () {\n      Animated.sequence([Animated.timing(_this.state.degree, {\n        toValue: 360,\n        duration: _this.props.rotationSpeed,\n        easing: Easing.linear,\n        useNativeDriver: false\n      })]).start(function () {\n        if (!_this.unmounted) {\n          _this.state.degree.setValue(0);\n\n          _this._animation();\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(RotationCircleLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._animation();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unmounted = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          size = _this$props.size,\n          color = _this$props.color;\n      var degree = this.state.degree.interpolate({\n        inputRange: [0, 360],\n        outputRange: ['0deg', '360deg']\n      });\n      return _jsx(Animated.View, {\n        style: {\n          transform: [{\n            rotate: degree\n          }],\n          backgroundColor: 'rgba(0,0,0,0)',\n          width: size,\n          height: size\n        },\n        children: _jsx(Surface, {\n          width: size,\n          height: size,\n          children: _jsxs(Group, {\n            children: [_jsx(AnimatedCircle, {\n              fill: color,\n              radius: size,\n              x: size / 2,\n              y: size / 2\n            }), _jsx(AnimatedCircle, {\n              fill: \"#fff\",\n              radius: size / 4,\n              x: size / 2,\n              y: size / 8\n            })]\n          })\n        })\n      });\n    }\n  }]);\n\n  return RotationCircleLoader;\n}(React.PureComponent);\n\nRotationCircleLoader.propTypes = {\n  size: PropTypes.number,\n  color: PropTypes.string,\n  rotationSpeed: PropTypes.number\n};\nRotationCircleLoader.defaultProps = {\n  size: 40,\n  color: color,\n  rotationSpeed: 800\n};\nexport { RotationCircleLoader as default };","map":{"version":3,"sources":["/home/telix/crypto-notes/crypto_notes/node_modules/react-native-indicator/lib/loader/RotationCircleLoader.js"],"names":["React","PropTypes","Surface","Group","AnimatedCircle","color","RotationCircleLoader","state","degree","Animated","Value","_animation","sequence","timing","toValue","duration","props","rotationSpeed","easing","Easing","linear","useNativeDriver","start","unmounted","setValue","size","interpolate","inputRange","outputRange","transform","rotate","backgroundColor","width","height","PureComponent","propTypes","number","string","defaultProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,6BAA/B;AACA,OAAOC,cAAP;AACA,SAASC,KAAT;;;;IAEqBC,oB;;;;;;;;;;;;;;;UAapBC,K,GAAQ;AACPC,MAAAA,MAAM,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB;AADD,K;;UAYRC,U,GAAa,YAAM;AAClBF,MAAAA,QAAQ,CAACG,QAAT,CAAkB,CACjBH,QAAQ,CAACI,MAAT,CAAgB,MAAKN,KAAL,CAAWC,MAA3B,EAAmC;AAClCM,QAAAA,OAAO,EAAE,GADyB;AAElCC,QAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWC,aAFa;AAGlCC,QAAAA,MAAM,EAAEC,MAAM,CAACC,MAHmB;AAIlCC,QAAAA,eAAe,EAAE;AAJiB,OAAnC,CADiB,CAAlB,EAOGC,KAPH,CAOS,YAAM;AACd,YAAI,CAAC,MAAKC,SAAV,EAAqB;AACpB,gBAAKhB,KAAL,CAAWC,MAAX,CAAkBgB,QAAlB,CAA2B,CAA3B;;AACA,gBAAKb,UAAL;AACA;AACD,OAZD;AAaA,K;;;;;;;WAtBD,6BAAoB;AACnB,WAAKA,UAAL;AACA;;;WAED,gCAAuB;AACtB,WAAKY,SAAL,GAAiB,IAAjB;AACA;;;WAkBD,kBAAS;AACR,wBAAwB,KAAKP,KAA7B;AAAA,UAAQS,IAAR,eAAQA,IAAR;AAAA,UAAcpB,KAAd,eAAcA,KAAd;AACA,UAAMG,MAAM,GAAG,KAAKD,KAAL,CAAWC,MAAX,CAAkBkB,WAAlB,CAA8B;AAC5CC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,CADgC;AAE5CC,QAAAA,WAAW,EAAE,CAAC,MAAD,EAAS,QAAT;AAF+B,OAA9B,CAAf;AAIA,aACC,KAAC,QAAD,CAAU,IAAV;AACC,QAAA,KAAK,EAAE;AACNC,UAAAA,SAAS,EAAE,CAAC;AAAEC,YAAAA,MAAM,EAAEtB;AAAV,WAAD,CADL;AAENuB,UAAAA,eAAe,EAAE,eAFX;AAGNC,UAAAA,KAAK,EAAEP,IAHD;AAINQ,UAAAA,MAAM,EAAER;AAJF,SADR;AAAA,kBAOC,KAAC,OAAD;AAAS,UAAA,KAAK,EAAEA,IAAhB;AAAsB,UAAA,MAAM,EAAEA,IAA9B;AAAA,oBACC,MAAC,KAAD;AAAA,uBACC,KAAC,cAAD;AAAgB,cAAA,IAAI,EAAEpB,KAAtB;AAA6B,cAAA,MAAM,EAAEoB,IAArC;AAA2C,cAAA,CAAC,EAAEA,IAAI,GAAG,CAArD;AAAwD,cAAA,CAAC,EAAEA,IAAI,GAAG;AAAlE,cADD,EAEC,KAAC,cAAD;AAAgB,cAAA,IAAI,EAAC,MAArB;AAA4B,cAAA,MAAM,EAAEA,IAAI,GAAG,CAA3C;AAA8C,cAAA,CAAC,EAAEA,IAAI,GAAG,CAAxD;AAA2D,cAAA,CAAC,EAAEA,IAAI,GAAG;AAArE,cAFD;AAAA;AADD;AAPD,QADD;AAgBA;;;;EA/DgDzB,KAAK,CAACkC,a;;AAAnC5B,oB,CACb6B,S,GAAY;AAClBV,EAAAA,IAAI,EAAExB,SAAS,CAACmC,MADE;AAElB/B,EAAAA,KAAK,EAAEJ,SAAS,CAACoC,MAFC;AAGlBpB,EAAAA,aAAa,EAAEhB,SAAS,CAACmC;AAHP,C;AADC9B,oB,CAObgC,Y,GAAe;AACrBb,EAAAA,IAAI,EAAE,EADe;AAErBpB,EAAAA,KAAK,EAALA,KAFqB;AAGrBY,EAAAA,aAAa,EAAE;AAHM,C;SAPFX,oB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing } from 'react-native';\nimport { Surface, Group } from '@react-native-community/art';\nimport AnimatedCircle from '../animated/AnimatedCircle';\nimport { color } from '../const';\n\nexport default class RotationCircleLoader extends React.PureComponent {\n\tstatic propTypes = {\n\t\tsize: PropTypes.number,\n\t\tcolor: PropTypes.string,\n\t\trotationSpeed: PropTypes.number\n\t};\n\n\tstatic defaultProps = {\n\t\tsize: 40,\n\t\tcolor,\n\t\trotationSpeed: 800\n\t};\n\n\tstate = {\n\t\tdegree: new Animated.Value(0)\n\t};\n\n\tcomponentDidMount() {\n\t\tthis._animation();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.unmounted = true;\n\t}\n\n\t_animation = () => {\n\t\tAnimated.sequence([\n\t\t\tAnimated.timing(this.state.degree, {\n\t\t\t\ttoValue: 360,\n\t\t\t\tduration: this.props.rotationSpeed,\n\t\t\t\teasing: Easing.linear,\n\t\t\t\tuseNativeDriver: false\n\t\t\t})\n\t\t]).start(() => {\n\t\t\tif (!this.unmounted) {\n\t\t\t\tthis.state.degree.setValue(0);\n\t\t\t\tthis._animation();\n\t\t\t}\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { size, color } = this.props;\n\t\tconst degree = this.state.degree.interpolate({\n\t\t\tinputRange: [0, 360],\n\t\t\toutputRange: ['0deg', '360deg']\n\t\t});\n\t\treturn (\n\t\t\t<Animated.View\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform: [{ rotate: degree }],\n\t\t\t\t\tbackgroundColor: 'rgba(0,0,0,0)',\n\t\t\t\t\twidth: size,\n\t\t\t\t\theight: size\n\t\t\t\t}}>\n\t\t\t\t<Surface width={size} height={size}>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<AnimatedCircle fill={color} radius={size} x={size / 2} y={size / 2}/>\n\t\t\t\t\t\t<AnimatedCircle fill=\"#fff\" radius={size / 4} x={size / 2} y={size / 8}/>\n\t\t\t\t\t</Group>\n\t\t\t\t</Surface>\n\t\t\t</Animated.View>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}