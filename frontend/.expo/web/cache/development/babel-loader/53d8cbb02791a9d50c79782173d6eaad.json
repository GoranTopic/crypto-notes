{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Toast, { SuccessToast, BaseToast, ErrorToast } from 'react-native-toast-message';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function successToast(props) {\n  var _props$type = props.type,\n      type = _props$type === void 0 ? 'success' : _props$type,\n      _props$text = props.text1,\n      text1 = _props$text === void 0 ? 'success' : _props$text,\n      _props$topOffset = props.topOffset,\n      topOffset = _props$topOffset === void 0 ? 100 : _props$topOffset;\n  Toast.show(_objectSpread({\n    type: type,\n    text1: text1,\n    topOffset: topOffset\n  }, props));\n}\nexport function errorToast(props) {\n  var _props$type2 = props.type,\n      type = _props$type2 === void 0 ? 'error' : _props$type2,\n      _props$text2 = props.text1,\n      text1 = _props$text2 === void 0 ? 'error' : _props$text2,\n      _props$topOffset2 = props.topOffset,\n      topOffset = _props$topOffset2 === void 0 ? 100 : _props$topOffset2;\n  Toast.show(_objectSpread({\n    type: type,\n    text1: text1,\n    topOffset: topOffset\n  }, props));\n}\nexport function infoToast(props) {\n  var _props$type3 = props.type,\n      type = _props$type3 === void 0 ? 'info' : _props$type3,\n      _props$text3 = props.text1,\n      text1 = _props$text3 === void 0 ? 'info' : _props$text3,\n      _props$topOffset3 = props.topOffset,\n      topOffset = _props$topOffset3 === void 0 ? 100 : _props$topOffset3;\n  Toast.show(_objectSpread({\n    type: type,\n    text1: text1,\n    topOffset: topOffset\n  }, props));\n}\nexport var toastConfig = {\n  success: function success(props) {\n    return _jsx(SuccessToast, _objectSpread(_objectSpread({}, props), {}, {\n      style: {\n        borderLeftColor: 'green'\n      },\n      contentContainerStyle: {\n        paddingHorizontal: 15\n      },\n      text1Style: {\n        fontSize: 15,\n        fontWeight: '600'\n      }\n    }));\n  },\n  error: function error(props) {\n    return _jsx(ErrorToast, _objectSpread(_objectSpread({}, props), {}, {\n      style: {\n        borderLeftColor: 'green',\n        color: 'blue',\n        borderLeftWidth: 50\n      },\n      contentContainerProps: {\n        color: 'blue',\n        borderLeftWidth: 50\n      },\n      contentContainerStyle: {\n        paddingHorizontal: 5\n      },\n      text1Style: {\n        fontSize: 16,\n        fontWeight: '600'\n      },\n      text2Style: {\n        fontSize: 15\n      }\n    }));\n  },\n  tomatoToast: function tomatoToast(_ref) {\n    var text1 = _ref.text1,\n        props = _ref.props;\n    return _jsxs(View, {\n      style: {\n        height: 60,\n        width: '100%',\n        backgroundColor: 'tomato'\n      },\n      children: [_jsx(Text, {\n        children: text1\n      }), _jsx(Text, {\n        children: props.uuid\n      })]\n    });\n  }\n};","map":{"version":3,"sources":["/home/telix/crypto-notes/crypto_notes/src/components/Toaster.js"],"names":["React","Toast","SuccessToast","BaseToast","ErrorToast","successToast","props","type","text1","topOffset","show","errorToast","infoToast","toastConfig","success","borderLeftColor","paddingHorizontal","fontSize","fontWeight","error","color","borderLeftWidth","tomatoToast","height","width","backgroundColor","uuid"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport Toast, { SuccessToast, BaseToast, ErrorToast } from 'react-native-toast-message';\n\nexport function successToast(props){\n    const { type = 'success',\n        text1 = 'success',\n        topOffset= 100,\n    } = props;\n    Toast.show({ type, text1, topOffset, ...props });\n}\n\nexport function errorToast(props){\n    const { type = 'error',\n        text1 = 'error',\n        topOffset= 100,\n    } = props;\n    Toast.show({ type, text1, topOffset, ...props });\n}\n\nexport function infoToast(props){\n    const { type = 'info',\n        text1 = 'info',\n        topOffset= 100,\n    } = props;\n    Toast.show({ type, text1, topOffset, ...props });\n}\n\n// App.jsx\n\n/*\n    1. Create the config\n    */\nexport const toastConfig = {\n    /* Overwrite 'success' type,\n        by modifying the existing `BaseToast` component */\n    success: (props) => (\n        <SuccessToast\n            {...props}\n            style={{ borderLeftColor: 'green' }}\n            contentContainerStyle={{ paddingHorizontal: 15 }}\n            text1Style={{\n                fontSize: 15,\n                fontWeight: '600'\n            }}\n        />\n    ),\n    /* Overwrite 'error' type,\n        by modifying the existing `ErrorToast` component */\n    error: (props) => (\n        <ErrorToast\n            {...props}\n            style={{ \n                borderLeftColor: 'green' ,\n                color: 'blue', \n                borderLeftWidth: 50,\n            }}\n            contentContainerProps={{\n                color: 'blue', \n                borderLeftWidth: 50,\n            }}\n            contentContainerStyle={{ \n                paddingHorizontal: 5,\n            }}\n            text1Style={{\n                fontSize: 16,\n                fontWeight: '600'\n            }}\n            text2Style={{\n                fontSize: 15\n            }}\n        />\n    ),\n    /* Or create a completely new type - `tomatoToast`,\n        building the layout from scratch.\n        I can consume any custom `props` I want.\n        They will be passed when calling the `show` method (see below) */\n    tomatoToast: ({ text1, props }) => (\n        <View style={{ height: 60, width: '100%', backgroundColor: 'tomato' }}>\n            <Text>{text1}</Text>\n            <Text>{props.uuid}</Text>\n        </View>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}