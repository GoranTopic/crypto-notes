{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"./TextInput.js\";\nimport validator from 'validator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function ValidatingTextInput(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorText = _useState2[0],\n      setErrorText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      validators = _useState4[0],\n      setValidators = _useState4[1];\n\n  var value = props.value,\n      onChangeText = props.onChangeText,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? 'input' : _props$placeholder,\n      _props$error = props.error,\n      error = _props$error === void 0 ? 'invalid' : _props$error,\n      _props$showError = props.showError,\n      showError = _props$showError === void 0 ? false : _props$showError,\n      _props$validate = props.validate,\n      validate = _props$validate === void 0 ? true : _props$validate,\n      _props$styleTextInput = props.styleTextInput,\n      styleTextInput = _props$styleTextInput === void 0 ? {} : _props$styleTextInput,\n      _props$styleContainer = props.styleContainer,\n      styleContainer = _props$styleContainer === void 0 ? {} : _props$styleContainer,\n      _props$styleErrorText = props.styleErrorText,\n      styleErrorText = _props$styleErrorText === void 0 ? {} : _props$styleErrorText;\n\n  var getValidators = function getValidators() {\n    return Object.keys(props).filter(function (prop) {\n      return validator[prop];\n    }).map(function (prop) {\n      return {\n        validate: validator[prop],\n        params: typeof props[prop] === \"boolean\" ? {} : props[prop]\n      };\n    });\n  };\n\n  useEffect(function () {\n    if (showError) setErrorText(error);else setErrorText('');\n  }, [error, showError]);\n  useEffect(function () {\n    setValidators(getValidators());\n    if (showError) setErrorText(error);\n  }, []);\n\n  var onChange = function onChange(text) {\n    onChangeText(text);\n    console.log(text);\n    if (validate) validators.forEach(function (validator) {\n      if (!validator.validate(text, validator.params)) setErrorText(error);else setErrorText('');\n    });\n  };\n\n  var containerStyles = [styles.container, styleContainer];\n  var textInputStyles = [styles.textInput, styleTextInput];\n  var errorTextStyles = [styles.errorText, styleErrorText];\n  return _jsxs(View, {\n    style: containerStyles,\n    children: [_jsx(TextInput, _objectSpread(_objectSpread({\n      style: textInputStyles\n    }, props), {}, {\n      onChangeText: onChange\n    })), errorText !== '' ? _jsxs(Text, {\n      style: errorTextStyles,\n      children: [\"* \", errorText]\n    }) : _jsx(_Fragment, {})]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  textInput: {},\n  errorText: {\n    color: 'red',\n    fontStyle: 'italic',\n    fontSize: 12,\n    fontWeight: '900',\n    textAlign: 'left'\n  }\n});","map":{"version":3,"sources":["/home/telix/crypto-notes/crypto_notes/src/components/text-inputs/ValidatingTextInput.js"],"names":["React","useEffect","useState","TextInput","validator","ValidatingTextInput","props","errorText","setErrorText","validators","setValidators","value","onChangeText","placeholder","error","showError","validate","styleTextInput","styleContainer","styleErrorText","getValidators","Object","keys","filter","prop","map","params","onChange","text","console","log","forEach","containerStyles","styles","container","textInputStyles","textInput","errorTextStyles","StyleSheet","create","flexDirection","justifyContent","color","fontStyle","fontSize","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState  } from 'react';\nimport { StyleSheet, Text,  View, } from 'react-native';\nimport TextInput from './TextInput.js';\nimport validator from 'validator';\n\nexport default function ValidatingTextInput(props){\n    /* this component needs cleaning, but it get the job done */\n    const [errorText, setErrorText] = useState('');\n    const [validators, setValidators] = useState([]);\n\n    const { value, // default value from props\n        onChangeText,\n        placeholder = 'input',\n        error= 'invalid',\n        showError=false,\n        validate = true,\n        styleTextInput = {},\n        styleContainer = {},\n        styleErrorText = {},\n    } = props;\n    // intesect\n\n    const getValidators = () =>\n        Object.keys(props)\n            .filter( prop => validator[prop])\n            .map( prop => ({\n                validate: validator[prop],\n                params: typeof props[prop] === \"boolean\" ?\n                {} : props[prop],\n            }));\n\n    useEffect(() => {\n        if(showError)\n            setErrorText(error);\n        else setErrorText('');\n    }, [error, showError]);\n\n    useEffect(() => { // get validatos from props\n        setValidators( getValidators());\n        if(showError) setErrorText(error);\n    }, []);\n\n    const onChange = text => {\n        onChangeText(text);\n        console.log(text);\n        if(validate)\n            validators.forEach( validator => {\n                //console.log(validator);\n                if(!validator.validate(text, validator.params)) \n                    setErrorText(error);\n                else setErrorText('');\n                //console.log(error);\n            });\n    };\n\n    const containerStyles = [ styles.container,  styleContainer ];\n    const textInputStyles = [ styles.textInput,  styleTextInput ];\n    const errorTextStyles = [ styles.errorText,  styleErrorText ];\n\n    return(\n        <View style={containerStyles}>\n            <TextInput\n                style={textInputStyles}\n                {...props}\n                onChangeText={onChange}\n            />\n            { errorText !== '' ?\n                <Text style={errorTextStyles}>\n                    * {errorText}\n                </Text> :\n                    <></>\n            }\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection:'column',\n        justifyContent: 'center',\n    },\n    textInput: {\n    },\n    errorText:{\n        color: 'red',\n        fontStyle: 'italic',\n        fontSize: 12,\n        fontWeight: '900',\n        textAlign: 'left',\n    },\n});\n\n"]},"metadata":{},"sourceType":"module"}